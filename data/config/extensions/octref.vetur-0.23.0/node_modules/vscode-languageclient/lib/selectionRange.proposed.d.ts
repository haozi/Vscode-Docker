import { Disposable, TextDocument, ProviderResult, Position as VPosition, SelectionRange as VSelectionRange } from 'vscode';
import { ClientCapabilities, CancellationToken, ServerCapabilities, TextDocumentRegistrationOptions, DocumentSelector } from 'vscode-languageserver-protocol';
import { TextDocumentFeature, BaseLanguageClient } from './client';
export interface ProvideSelectionRangeSignature {
    (document: TextDocument, positions: VPosition[], token: CancellationToken): ProviderResult<VSelectionRange[][]>;
}
export interface SelectionRangeProviderMiddleware {
    provideSelectionRanges?: (this: void, document: TextDocument, positions: VPosition[], token: CancellationToken, next: ProvideSelectionRangeSignature) => ProviderResult<VSelectionRange[][]>;
}
export declare class SelectionRangeFeature extends TextDocumentFeature<TextDocumentRegistrationOptions> {
    constructor(client: BaseLanguageClient);
    fillClientCapabilities(capabilites: ClientCapabilities): void;
    initialize(capabilities: ServerCapabilities, documentSelector: DocumentSelector): void;
    protected registerLanguageProvider(options: TextDocumentRegistrationOptions): Disposable;
    private asSelectionRanges;
    private asSelectionRangeKind;
}
declare module 'vscode' {
    class SelectionRangeKind {
        /**
         * Empty Kind.
         */
        static readonly Empty: SelectionRangeKind;
        /**
         * The statment kind, its value is `statement`, possible extensions can be
         * `statement.if` etc
         */
        static readonly Statement: SelectionRangeKind;
        /**
         * The declaration kind, its value is `declaration`, possible extensions can be
         * `declaration.function`, `declaration.class` etc.
         */
        static readonly Declaration: SelectionRangeKind;
        readonly value: string;
        private constructor();
        append(value: string): SelectionRangeKind;
    }
    class SelectionRange {
        kind: SelectionRangeKind;
        range: Range;
        constructor(range: Range, kind: SelectionRangeKind);
    }
    interface SelectionRangeProvider {
        /**
         * Provide selection ranges starting at a given position. The first range must [contain](#Range.contains)
         * position and subsequent ranges must contain the previous range.
         */
        provideSelectionRanges(document: TextDocument, position: Position[], token: CancellationToken): ProviderResult<SelectionRange[][]>;
    }
    namespace languages {
        function registerSelectionRangeProvider(selector: DocumentSelector, provider: SelectionRangeProvider): Disposable;
    }
}
