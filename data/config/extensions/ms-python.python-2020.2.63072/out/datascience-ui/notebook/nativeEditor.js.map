{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/datascience-ui/native-editor/nativeEditor.less?cef7","webpack:///./src/datascience-ui/react-common/constants.ts","webpack:///./src/datascience-ui/native-editor/addCellLine.tsx","webpack:///./src/datascience-ui/native-editor/redux/actions.ts","webpack:///./src/datascience-ui/native-editor/nativeCell.tsx","webpack:///./src/datascience-ui/native-editor/nativeEditor.tsx","webpack:///./src/datascience-ui/native-editor/redux/reducers/creation.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/effects.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/execution.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/movement.ts","webpack:///./src/datascience-ui/native-editor/redux/reducers/index.ts","webpack:///./src/datascience-ui/native-editor/index.tsx","webpack:///./src/datascience-ui/native-editor/redux/store.ts","webpack:///./src/datascience-ui/native-editor/nativeEditor.less"],"names":["i","chunkIds","length","deferredModules","j","deferredModule","module","chunkId","type","target","script","enumerable","get","getter","value","key","bind","Object","prototype","hasOwnProperty","call","object","property","console","error","err","jsonpArray","webpackJsonpCallback","content","options","transform","undefined","locals","exports","getOSType","window","navigator","platform","startsWith","OSX","Windows","userAgent","indexOf","Linux","Unknown","props","render","className","this","tooltip","plus","includePlus","baseTheme","class","image","InsertBelow","role","title","onClick","click","actionCreators","insertAbove","cellId","INSERT_ABOVE","payload","insertAboveFirst","INSERT_ABOVE_FIRST","insertBelow","INSERT_BELOW","focusCell","cursorPos","Current","FOCUS_CELL","unfocusCell","code","UNFOCUS_CELL","selectCell","SELECT_CELL","addCell","ADD_NEW_CELL","executeCell","moveOp","EXECUTE_CELL","executeAllCells","EXECUTE_ALL_CELLS","executeAbove","EXECUTE_ABOVE","executeCellAndBelow","EXECUTE_CELL_AND_BELOW","toggleVariableExplorer","TOGGLE_VARIABLE_EXPLORER","refreshVariables","newExecutionCount","REFRESH_VARIABLES","restartKernel","RESTART_KERNEL","interruptKernel","INTERRUPT_KERNEL","clearAllOutputs","CLEAR_ALL_OUTPUTS","export","EXPORT","save","SAVE","showDataViewer","variable","columnSize","SHOW_DATA_VIEWER","sendCommand","command","commandType","SEND_COMMAND","moveCellUp","MOVE_CELL_UP","moveCellDown","MOVE_CELL_DOWN","changeCellType","currentCode","CHANGE_CELL_TYPE","toggleLineNumbers","TOGGLE_LINE_NUMBERS","toggleOutput","TOGGLE_OUTPUT","deleteCell","DELETE_CELL","undo","UNDO","redo","REDO","arrowUp","ARROW_UP","arrowDown","ARROW_DOWN","editCell","changes","modelId","EDIT_CELL","linkClick","href","LINK_CLICK","showPlot","imageHtml","SHOW_PLOT","gatherCell","GATHER_CELL","editorLoaded","EDITOR_LOADED","codeCreated","CODE_CREATED","loadedAllCells","LOADED_ALL_CELLS","editorUnmounted","UNMOUNT","selectKernel","SELECT_KERNEL","selectServer","SELECT_SERVER","getVariableData","startIndex","pageSize","GET_VARIABLE_DATA","executionCount","sortColumn","sortAscending","prop","inputRef","wrapperRef","getCell","cellVM","cell","isCodeCell","data","cell_type","isMarkdownCell","isSelected","selected","isFocused","focused","onMouseClick","ev","nativeEvent","elem","includes","stopPropagation","lastKeyPressed","onMouseDoubleClick","shouldRenderCodeEditor","inputBlockShow","editable","shouldRenderMarkdownEditor","isShowingMarkdownEditor","id","EditCellId","hasOutput","state","finished","executing","getCodeCell","keyDownInput","e","isFocusedWhenNotSuggesting","editorInfo","isSuggesting","isFirstLine","shiftKey","arrowUpFromCell","isLastLine","arrowDownFromCell","ctrlKey","metaKey","escapeCell","preventDefault","getCurrentCode","ChangeToCode","ChangeToMarkdown","ToggleLineNumbers","ToggleOutput","shiftEnterCell","ctrlEnterCell","altKey","altEnterCell","enterCell","DeleteCell","InsertAbove","Undo","Redo","current","focus","Unfocus","ArrowUp","ArrowDown","runAndMove","contents","RunAndMove","runAndAdd","RunAndAdd","submitCell","Run","possibleContents","source","addNewCell","AddToEnd","renderNavbar","addButtonRender","lastCell","MoveCellUp","disabled","firstCell","Up","MoveCellDown","Down","renderAddDivider","checkOutput","shouldRenderOutput","renderMiddleToolbar","gatherDisabled","execution_count","hasBeenRun","enableGather","switchTooltip","otherCellType","otherCellTypeCommand","otherCellImage","SwitchToMarkdown","SwitchToCode","toolbarClassName","hidden","onMouseDown","event","GatherCode","Delete","renderControls","busy","init","toString","isBusy","count","visible","renderInput","shouldRenderInput","editorOptions","history","codeTheme","onCodeChange","onCodeCreated","testMode","showWatermark","ref","monacoTheme","openLink","editorMeasureClassName","onCodeFocused","unfocused","onCodeUnfocused","keyDown","showLineNumbers","font","focusPending","_code","_file","renderOutput","themeMatplotlibPlots","toolbar","expandImage","maxTextSize","onOuterKeyDown","renderCollapseBar","input","classes","Array","isArray","outputs","uri","messages","renderNormalCell","componentDidUpdate","prevProps","giveFocus","shouldComponentUpdate","nextProps","getUnknownMimeTypeFormatString","contains","document","activeElement","scrollIntoView","behavior","block","inline","cellOuterClass","cellWrapperClass","tabIndex","onKeyDown","onDoubleClick","hideOutput","getContents","mapStateToProps","main","variableState","variables","ConnectedNativeCell","renderCount","waitingForLoadRender","getContentProps","cellVMs","submittedText","skipNextScroll","renderCell","scrollToBottom","scrollDiv","getVariableProps","debugging","showDataExplorer","skipDefault","closeVariableExplorer","pageIn","pageInVariableData","fontSize","size","currentExecutionCount","mainKeyDown","Save","focusedCellId","index","settings","firstLine","lastLine","maxOutputSize","allowUndo","undoStack","activateCount","_div","componentDidMount","addEventListener","forceUpdate","componentWillUnmount","removeEventListener","loaded","setTimeout","requestAnimationFrame","dynamicFont","fontFamily","family","progressBar","addCellLine","style","rootCss","renderToolbarPanel","renderVariablePanel","renderContentPanel","selectedIndex","findIndex","c","selectedCellId","variableExplorerTooltip","canRunAbove","canRunBelow","RunAll","RunAbove","RunBelow","Restart","Interrupt","ClearAllOutput","ToggleVariableExplorer","VariableExplorer","dirty","SaveAs","ExportToPython","kernel","SelectServer","SelectKernel","variableProps","monacoReady","contentProps","Creation","prepareCellVM","newText","inputBlockOpen","inputBlockText","findFirstCodeCellAbove","start","arg","newVM","prevState","newList","position","splice","result","pushStack","queueAction","InsertCell","codeCellAboveId","push","firstCellId","startCell","updateOrAdd","s","updateCell","finishCell","deleteAllCells","DeleteAllCells","inputBlockCollapseNeeded","scrollCount","cells","RemoveCell","newSelection","newFocused","newVMs","filter","nextOrPrev","loadAllCells","vms","map","loadTotal","unmount","redoStack","Effects","newCell","asCellViewModel","deselectCell","removeFocusIndex","oldFocusCell","oldCode","uncomittedText","addFocusIndex","shouldFocusCell","addIndex","anotherCellWasFocusedAndSelected","shouldSetFocusToCell","updateSettings","newSettings","JSON","parse","newEditorOptions","newFontFamily","extraSettings","newFontSize","theme","vscodeThemeName","knownDark","computeKnownDark","GetCssRequest","isDark","GetMonacoThemeRequest","lineDecorationsWidth","Movement","cloneDeep","Execution","executeRange","end","codes","pos","orig","matcher","stripFirstMarker","clonedCell","ReExecuteCell","executeResult","_c","executeSelectedCell","ClearAllOutputs","newType","newNotebookCell","firstCodeCellAbove","slice","cvm","SwapCells","secondCellId","newState","Bottom","Top","reducerMap","exportCells","selectJupyterURI","gather","started","STARTCELL","FINISHCELL","UPDATECELL","NOTEBOOKDIRTY","notebookDirty","NOTEBOOKCLEAN","notebookClean","LOADALLCELLS","NOTEBOOKRUNALLCELLS","NOTEBOOKRUNSELECTEDCELL","NOTEBOOKADDCELLBELOW","DOSAVE","DELETEALLCELLS","STARTPROGRESS","startProgress","STOPPROGRESS","stopProgress","UPDATESETTINGS","ACTIVATE","activate","RESTARTKERNEL","handleRestarted","GETCSSRESPONSE","handleCss","MONACOREADY","GETMONACOTHEMERESPONSE","monacoThemeChange","UPDATEKERNEL","updateStatus","LOCINIT","handleLocInit","inTestMode","acquireVsCodeApi","ConnectedNativeEditor","store","getElementById"],"mappings":"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","file":"nativeEditor.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"nativeEditor\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\":\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\",\"modeldebug\":\"modeldebug\",\"nteract_transforms_vsdom\":\"nteract_transforms_vsdom\",\"vendors~dataresource~vega\":\"vendors~dataresource~vega\",\"vendors~dataresource\":\"vendors~dataresource\",\"vendors~geojson\":\"vendors~geojson\",\"vendors~nteract_transforms\":\"vendors~nteract_transforms\",\"vendors~vega\":\"vendors~vega\",\"vega\":\"vega\",\"vendors~plotly\":\"vendors~plotly\"}[chunkId]||chunkId) + \".bundle.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\t(function (module) {\n \t\t  if (module.exports\n \t\t    && !module.exports.__esModule\n \t\t    && module.exports.default === undefined\n \t\t  ) {\n \t\t    if (module.exports.headers\n \t\t      && module.exports.headers.common\n \t\t      && module.exports.headers.common.Accept\n \t\t      && module.exports.adapter\n \t\t      && module.exports.transformRequest\n \t\t      && module.exports.transformResponse\n \t\t    ) {\n \t\t      return;\n \t\t    }\n \t\t    module.exports.default = module.exports;\n \t\t  }\n \t\t})(module);\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"monaco\",\"commons\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./nativeEditor.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","import { OSType } from '../../client/common/utils/platform';\n\n// Javascript keyCodes\nexport const KeyCodes = {\n    LeftArrow: 37,\n    UpArrow: 38,\n    RightArrow: 39,\n    DownArrow: 40,\n    PageUp: 33,\n    PageDown: 34,\n    End: 35,\n    Home: 36\n};\n\nexport function getOSType() {\n    if (window.navigator.platform.startsWith('Mac')) {\n        return OSType.OSX;\n    } else if (window.navigator.platform.startsWith('Win')) {\n        return OSType.Windows;\n    } else if (window.navigator.userAgent.indexOf('Linux') > 0) {\n        return OSType.Linux;\n    } else {\n        return OSType.Unknown;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n'use strict';\nimport * as React from 'react';\nimport { Image, ImageName } from '../react-common/image';\nimport { getLocString } from '../react-common/locReactSide';\n\ninterface IAddCellLineProps {\n    baseTheme: string;\n    includePlus: boolean;\n    className: string;\n    click(): void;\n}\n\nexport class AddCellLine extends React.Component<IAddCellLineProps> {\n    constructor(props: IAddCellLineProps) {\n        super(props);\n    }\n\n    public render() {\n        const className = `add-cell-line ${this.props.className}`;\n        const tooltip = getLocString('DataScience.insertBelow', 'Insert cell below');\n        const plus = this.props.includePlus ? <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} /> : null;\n        return (\n            <div className={className}>\n                <button role=\"button\" aria-pressed=\"false\" title={tooltip} aria-label={tooltip} className=\"add-cell-line-button\" onClick={this.props.click}>\n                    {plus}\n                    <span className=\"add-cell-line-divider\" />\n                </button>\n            </div>\n        );\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { NativeCommandType } from '../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { IJupyterVariable, IJupyterVariablesRequest } from '../../../client/datascience/types';\nimport { CursorPos } from '../../interactive-common/mainState';\nimport {\n    CommonAction,\n    CommonActionType,\n    ICellAction,\n    ICellAndCursorAction,\n    IChangeCellTypeAction,\n    ICodeAction,\n    ICodeCreatedAction,\n    IEditCellAction,\n    IExecuteAction,\n    ILinkClickAction,\n    IRefreshVariablesAction,\n    ISendCommandAction,\n    IShowDataViewerAction,\n    IShowPlotAction\n} from '../../interactive-common/redux/reducers/types';\n\n// See https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\nexport const actionCreators = {\n    insertAbove: (cellId: string | undefined): CommonAction<ICellAction> => ({ type: CommonActionType.INSERT_ABOVE, payload: { cellId } }),\n    insertAboveFirst: (): CommonAction<never | undefined> => ({ type: CommonActionType.INSERT_ABOVE_FIRST }),\n    insertBelow: (cellId: string | undefined): CommonAction<ICellAction> => ({ type: CommonActionType.INSERT_BELOW, payload: { cellId } }),\n    focusCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> => ({\n        type: CommonActionType.FOCUS_CELL,\n        payload: { cellId, cursorPos }\n    }),\n    unfocusCell: (cellId: string, code: string): CommonAction<ICodeAction> => ({ type: CommonActionType.UNFOCUS_CELL, payload: { cellId, code } }),\n    selectCell: (cellId: string, cursorPos: CursorPos = CursorPos.Current): CommonAction<ICellAndCursorAction> => ({\n        type: CommonActionType.SELECT_CELL,\n        payload: { cellId, cursorPos }\n    }),\n    addCell: (): CommonAction<never | undefined> => ({ type: CommonActionType.ADD_NEW_CELL }),\n    executeCell: (cellId: string, code: string, moveOp: 'add' | 'select' | 'none'): CommonAction<IExecuteAction> => ({\n        type: CommonActionType.EXECUTE_CELL,\n        payload: { cellId, code, moveOp }\n    }),\n    executeAllCells: (): CommonAction<never | undefined> => ({ type: CommonActionType.EXECUTE_ALL_CELLS }),\n    executeAbove: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.EXECUTE_ABOVE, payload: { cellId } }),\n    executeCellAndBelow: (cellId: string, code: string): CommonAction<ICodeAction> => ({ type: CommonActionType.EXECUTE_CELL_AND_BELOW, payload: { cellId, code } }),\n    toggleVariableExplorer: (): CommonAction<never | undefined> => ({ type: CommonActionType.TOGGLE_VARIABLE_EXPLORER }),\n    refreshVariables: (newExecutionCount?: number): CommonAction<IRefreshVariablesAction> => ({ type: CommonActionType.REFRESH_VARIABLES, payload: { newExecutionCount } }),\n    restartKernel: (): CommonAction<never | undefined> => ({ type: CommonActionType.RESTART_KERNEL }),\n    interruptKernel: (): CommonAction<never | undefined> => ({ type: CommonActionType.INTERRUPT_KERNEL }),\n    clearAllOutputs: (): CommonAction<never | undefined> => ({ type: CommonActionType.CLEAR_ALL_OUTPUTS }),\n    export: (): CommonAction<never | undefined> => ({ type: CommonActionType.EXPORT }),\n    save: (): CommonAction<never | undefined> => ({ type: CommonActionType.SAVE }),\n    showDataViewer: (variable: IJupyterVariable, columnSize: number): CommonAction<IShowDataViewerAction> => ({\n        type: CommonActionType.SHOW_DATA_VIEWER,\n        payload: { variable, columnSize }\n    }),\n    sendCommand: (command: NativeCommandType, commandType: 'mouse' | 'keyboard'): CommonAction<ISendCommandAction> => ({\n        type: CommonActionType.SEND_COMMAND,\n        payload: { command, commandType }\n    }),\n    moveCellUp: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.MOVE_CELL_UP, payload: { cellId } }),\n    moveCellDown: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.MOVE_CELL_DOWN, payload: { cellId } }),\n    changeCellType: (cellId: string, currentCode: string): CommonAction<IChangeCellTypeAction> => ({ type: CommonActionType.CHANGE_CELL_TYPE, payload: { cellId, currentCode } }),\n    toggleLineNumbers: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.TOGGLE_LINE_NUMBERS, payload: { cellId } }),\n    toggleOutput: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.TOGGLE_OUTPUT, payload: { cellId } }),\n    deleteCell: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.DELETE_CELL, payload: { cellId } }),\n    undo: (): CommonAction<never | undefined> => ({ type: CommonActionType.UNDO }),\n    redo: (): CommonAction<never | undefined> => ({ type: CommonActionType.REDO }),\n    arrowUp: (cellId: string, code: string): CommonAction<ICodeAction> => ({ type: CommonActionType.ARROW_UP, payload: { cellId, code } }),\n    arrowDown: (cellId: string, code: string): CommonAction<ICodeAction> => ({ type: CommonActionType.ARROW_DOWN, payload: { cellId, code } }),\n    editCell: (cellId: string, changes: monacoEditor.editor.IModelContentChange[], modelId: string, code: string): CommonAction<IEditCellAction> => ({\n        type: CommonActionType.EDIT_CELL,\n        payload: { cellId, changes, modelId, code }\n    }),\n    linkClick: (href: string): CommonAction<ILinkClickAction> => ({ type: CommonActionType.LINK_CLICK, payload: { href } }),\n    showPlot: (imageHtml: string): CommonAction<IShowPlotAction> => ({ type: CommonActionType.SHOW_PLOT, payload: { imageHtml } }),\n    gatherCell: (cellId: string | undefined): CommonAction<ICellAction> => ({ type: CommonActionType.GATHER_CELL, payload: { cellId } }),\n    editorLoaded: (): CommonAction<never | undefined> => ({ type: CommonActionType.EDITOR_LOADED }),\n    codeCreated: (cellId: string | undefined, modelId: string): CommonAction<ICodeCreatedAction> => ({ type: CommonActionType.CODE_CREATED, payload: { cellId, modelId } }),\n    loadedAllCells: (): CommonAction<never | undefined> => ({ type: CommonActionType.LOADED_ALL_CELLS }),\n    editorUnmounted: (): CommonAction<never | undefined> => ({ type: CommonActionType.UNMOUNT }),\n    selectKernel: (): CommonAction<never | undefined> => ({ type: CommonActionType.SELECT_KERNEL }),\n    selectServer: (): CommonAction<never | undefined> => ({ type: CommonActionType.SELECT_SERVER }),\n    getVariableData: (newExecutionCount: number, startIndex: number = 0, pageSize: number = 100): CommonAction<IJupyterVariablesRequest> => ({\n        type: CommonActionType.GET_VARIABLE_DATA,\n        payload: { executionCount: newExecutionCount, sortColumn: 'name', sortAscending: true, startIndex, pageSize }\n    })\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport '../../client/common/extensions';\n\nimport { nbformat } from '@jupyterlab/coreutils';\nimport * as fastDeepEqual from 'fast-deep-equal';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { OSType } from '../../client/common/utils/platform';\nimport { Identifiers } from '../../client/datascience/constants';\nimport { NativeCommandType } from '../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CellState } from '../../client/datascience/types';\nimport { concatMultilineStringInput } from '../common';\nimport { CellInput } from '../interactive-common/cellInput';\nimport { CellOutput } from '../interactive-common/cellOutput';\nimport { ExecutionCount } from '../interactive-common/executionCount';\nimport { InformationMessages } from '../interactive-common/informationMessages';\nimport { CursorPos, ICellViewModel, IFont } from '../interactive-common/mainState';\nimport { getOSType } from '../react-common/constants';\nimport { IKeyboardEvent } from '../react-common/event';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { AddCellLine } from './addCellLine';\nimport { actionCreators } from './redux/actions';\n\ninterface INativeCellBaseProps {\n    role?: string;\n    cellVM: ICellViewModel;\n    baseTheme: string;\n    codeTheme: string;\n    testMode?: boolean;\n    maxTextSize?: number;\n    monacoTheme: string | undefined;\n    lastCell: boolean;\n    firstCell: boolean;\n    font: IFont;\n    allowUndo: boolean;\n    enableGather: boolean | undefined;\n    editorOptions: monacoEditor.editor.IEditorOptions;\n    themeMatplotlibPlots: boolean | undefined;\n    focusPending: number;\n}\n\ntype INativeCellProps = INativeCellBaseProps & typeof actionCreators;\n\n// tslint:disable: react-this-binding-issue\nexport class NativeCell extends React.Component<INativeCellProps> {\n    private inputRef: React.RefObject<CellInput> = React.createRef<CellInput>();\n    private wrapperRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private lastKeyPressed: string | undefined;\n\n    constructor(prop: INativeCellProps) {\n        super(prop);\n    }\n\n    public render() {\n        if (this.props.cellVM.cell.data.cell_type === 'messages') {\n            return <InformationMessages messages={this.props.cellVM.cell.data.messages} />;\n        } else {\n            return this.renderNormalCell();\n        }\n    }\n\n    public componentDidUpdate(prevProps: INativeCellProps) {\n        if (this.props.cellVM.selected && !prevProps.cellVM.selected && !this.props.cellVM.focused) {\n            this.giveFocus();\n        }\n\n        // Anytime we update, reset the key. This object will be reused for different cell ids\n        this.lastKeyPressed = undefined;\n    }\n\n    public shouldComponentUpdate(nextProps: INativeCellProps): boolean {\n        return !fastDeepEqual(this.props, nextProps);\n    }\n\n    // Public for testing\n    public getUnknownMimeTypeFormatString() {\n        return getLocString('DataScience.unknownMimeTypeFormat', 'Unknown Mime Type');\n    }\n\n    private giveFocus() {\n        if (this.wrapperRef && this.wrapperRef.current) {\n            // Give focus to the cell if not already owning focus\n            if (!this.wrapperRef.current.contains(document.activeElement)) {\n                this.wrapperRef.current.focus();\n            }\n\n            // Scroll into view (since we have focus). However this function\n            // is not supported on enzyme\n            if (this.wrapperRef.current.scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n        }\n    }\n\n    private getCell = () => {\n        return this.props.cellVM.cell;\n    };\n\n    private isCodeCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'code';\n    };\n\n    private isMarkdownCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'markdown';\n    };\n\n    private isSelected = () => {\n        return this.props.cellVM.selected;\n    };\n\n    private isFocused = () => {\n        return this.props.cellVM.focused;\n    };\n\n    private renderNormalCell() {\n        const cellOuterClass = this.props.cellVM.editable ? 'cell-outer-editable' : 'cell-outer';\n        let cellWrapperClass = this.props.cellVM.editable ? 'cell-wrapper' : 'cell-wrapper cell-wrapper-noneditable';\n        if (this.isSelected() && !this.isFocused()) {\n            cellWrapperClass += ' cell-wrapper-selected';\n        }\n        if (this.isFocused()) {\n            cellWrapperClass += ' cell-wrapper-focused';\n        }\n\n        // Content changes based on if a markdown cell or not.\n        const content =\n            this.isMarkdownCell() && !this.isShowingMarkdownEditor() ? (\n                <div className=\"cell-result-container\">\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(false)}\n                        {this.renderOutput()}\n                    </div>\n                    {this.renderAddDivider(false)}\n                </div>\n            ) : (\n                <div className=\"cell-result-container\">\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(true)}\n                        {this.renderControls()}\n                        {this.renderInput()}\n                    </div>\n                    {this.renderAddDivider(true)}\n                    <div className=\"cell-row-container\">\n                        {this.renderCollapseBar(false)}\n                        {this.renderOutput()}\n                    </div>\n                </div>\n            );\n\n        return (\n            <div\n                className={cellWrapperClass}\n                role={this.props.role}\n                ref={this.wrapperRef}\n                tabIndex={0}\n                onKeyDown={this.onOuterKeyDown}\n                onClick={this.onMouseClick}\n                onDoubleClick={this.onMouseDoubleClick}\n            >\n                <div className={cellOuterClass}>\n                    {this.renderNavbar()}\n                    <div className=\"content-div\">{content}</div>\n                </div>\n            </div>\n        );\n    }\n\n    private onMouseClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        if (ev.nativeEvent.target) {\n            const elem = ev.nativeEvent.target as HTMLElement;\n            if (!elem.className.includes || !elem.className.includes('image-button')) {\n                // Not a click on an button in a toolbar, select the cell.\n                ev.stopPropagation();\n                this.lastKeyPressed = undefined;\n                this.props.selectCell(this.cellId);\n            }\n        }\n    };\n\n    private onMouseDoubleClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        // When we receive double click, propagate upwards. Might change our state\n        ev.stopPropagation();\n        this.props.focusCell(this.cellId, CursorPos.Current);\n    };\n\n    private shouldRenderCodeEditor = (): boolean => {\n        return this.isCodeCell() && (this.props.cellVM.inputBlockShow || this.props.cellVM.editable);\n    };\n\n    private shouldRenderMarkdownEditor = (): boolean => {\n        return this.isMarkdownCell() && (this.isShowingMarkdownEditor() || this.props.cellVM.cell.id === Identifiers.EditCellId);\n    };\n\n    private isShowingMarkdownEditor = (): boolean => {\n        return this.isMarkdownCell() && this.props.cellVM.focused;\n    };\n\n    private shouldRenderInput(): boolean {\n        return this.shouldRenderCodeEditor() || this.shouldRenderMarkdownEditor();\n    }\n\n    private hasOutput = () => {\n        return this.getCell().state === CellState.finished || this.getCell().state === CellState.error || this.getCell().state === CellState.executing;\n    };\n\n    private getCodeCell = () => {\n        return this.props.cellVM.cell.data as nbformat.ICodeCell;\n    };\n\n    private shouldRenderOutput(): boolean {\n        if (this.isCodeCell()) {\n            const cell = this.getCodeCell();\n            return this.hasOutput() && cell.outputs && !this.props.cellVM.hideOutput && Array.isArray(cell.outputs) && cell.outputs.length !== 0;\n        } else if (this.isMarkdownCell()) {\n            return !this.isShowingMarkdownEditor();\n        }\n        return false;\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity max-func-body-length\n    private keyDownInput = (cellId: string, e: IKeyboardEvent) => {\n        const isFocusedWhenNotSuggesting = this.isFocused() && e.editorInfo && !e.editorInfo.isSuggesting;\n        switch (e.code) {\n            case 'ArrowUp':\n            case 'k':\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isFirstLine && !e.shiftKey) || !this.isFocused()) {\n                    this.arrowUpFromCell(e);\n                }\n                break;\n            case 'ArrowDown':\n            case 'j':\n                if ((isFocusedWhenNotSuggesting && e.editorInfo!.isLastLine && !e.shiftKey) || !this.isFocused()) {\n                    this.arrowDownFromCell(e);\n                }\n                break;\n            case 's':\n                if ((e.ctrlKey && getOSType() !== OSType.OSX) || (e.metaKey && getOSType() === OSType.OSX)) {\n                    // This is save, save our cells\n                    this.props.save();\n                }\n                break;\n\n            case 'Escape':\n                if (isFocusedWhenNotSuggesting) {\n                    this.escapeCell(e);\n                }\n                break;\n            case 'y':\n                if (!this.isFocused() && this.isSelected() && this.isMarkdownCell()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.changeCellType(cellId, this.getCurrentCode());\n                    this.props.sendCommand(NativeCommandType.ChangeToCode, 'keyboard');\n                }\n                break;\n            case 'm':\n                if (!this.isFocused() && this.isSelected() && this.isCodeCell()) {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    this.props.changeCellType(cellId, this.getCurrentCode());\n                    this.props.sendCommand(NativeCommandType.ChangeToMarkdown, 'keyboard');\n                }\n                break;\n            case 'l':\n                if (!this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    this.props.toggleLineNumbers(cellId);\n                    this.props.sendCommand(NativeCommandType.ToggleLineNumbers, 'keyboard');\n                }\n                break;\n            case 'o':\n                if (!this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    this.props.toggleOutput(cellId);\n                    this.props.sendCommand(NativeCommandType.ToggleOutput, 'keyboard');\n                }\n                break;\n            case 'Enter':\n                if (e.shiftKey) {\n                    this.shiftEnterCell(e);\n                } else if (e.ctrlKey) {\n                    this.ctrlEnterCell(e);\n                } else if (e.altKey) {\n                    this.altEnterCell(e);\n                } else {\n                    this.enterCell(e);\n                }\n                break;\n            case 'd':\n                if (this.lastKeyPressed === 'd' && !this.isFocused() && this.isSelected()) {\n                    e.stopPropagation();\n                    this.lastKeyPressed = undefined; // Reset it so we don't keep deleting\n                    this.props.deleteCell(cellId);\n                    this.props.sendCommand(NativeCommandType.DeleteCell, 'keyboard');\n                }\n                break;\n            case 'a':\n                if (!this.isFocused()) {\n                    e.stopPropagation();\n                    this.props.insertAbove(cellId);\n                    this.props.sendCommand(NativeCommandType.InsertAbove, 'keyboard');\n                }\n                break;\n            case 'b':\n                if (!this.isFocused()) {\n                    e.stopPropagation();\n                    this.props.insertBelow(cellId);\n                    this.props.sendCommand(NativeCommandType.InsertBelow, 'keyboard');\n                }\n                break;\n            case 'z':\n            case 'Z':\n                if (!this.isFocused()) {\n                    if (e.shiftKey && !e.ctrlKey && !e.altKey) {\n                        e.stopPropagation();\n                        this.props.redo();\n                        this.props.sendCommand(NativeCommandType.Redo, 'keyboard');\n                    } else if (!e.shiftKey && !e.altKey && !e.ctrlKey) {\n                        e.stopPropagation();\n                        this.props.undo();\n                        this.props.sendCommand(NativeCommandType.Undo, 'keyboard');\n                    }\n                }\n                break;\n\n            default:\n                break;\n        }\n\n        this.lastKeyPressed = e.code;\n    };\n\n    private get cellId(): string {\n        return this.props.cellVM.cell.id;\n    }\n\n    private escapeCell = (e: IKeyboardEvent) => {\n        // Unfocus the current cell by giving focus to the cell itself\n        if (this.wrapperRef && this.wrapperRef.current && this.isFocused()) {\n            e.stopPropagation();\n            this.wrapperRef.current.focus();\n            this.props.sendCommand(NativeCommandType.Unfocus, 'keyboard');\n        }\n    };\n\n    private arrowUpFromCell = (e: IKeyboardEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.arrowUp(this.cellId, this.getCurrentCode());\n        this.props.sendCommand(NativeCommandType.ArrowUp, 'keyboard');\n    };\n\n    private arrowDownFromCell = (e: IKeyboardEvent) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.props.arrowDown(this.cellId, this.getCurrentCode());\n        this.props.sendCommand(NativeCommandType.ArrowDown, 'keyboard');\n    };\n\n    private enterCell = (e: IKeyboardEvent) => {\n        // If focused, then ignore this call. It should go to the focused cell instead.\n        if (!this.isFocused() && !e.editorInfo && this.wrapperRef && this.wrapperRef && this.isSelected()) {\n            e.stopPropagation();\n            e.preventDefault();\n            this.props.focusCell(this.cellId, CursorPos.Current);\n        }\n    };\n\n    private shiftEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Submit and move to the next.\n        this.runAndMove(e.editorInfo ? e.editorInfo.contents : undefined);\n\n        this.props.sendCommand(NativeCommandType.RunAndMove, 'keyboard');\n    };\n\n    private altEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Submit this cell\n        this.runAndAdd(e.editorInfo ? e.editorInfo.contents : undefined);\n\n        this.props.sendCommand(NativeCommandType.RunAndAdd, 'keyboard');\n    };\n\n    private runAndMove(possibleContents?: string) {\n        // Submit this cell\n        this.submitCell(possibleContents, this.props.lastCell ? 'add' : 'select');\n    }\n\n    private runAndAdd(possibleContents?: string) {\n        // Submit this cell\n        this.submitCell(possibleContents, 'add');\n    }\n\n    private ctrlEnterCell = (e: IKeyboardEvent) => {\n        // Prevent shift enter from add an enter\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Submit this cell\n        this.submitCell(e.editorInfo ? e.editorInfo.contents : undefined, 'none');\n        this.props.sendCommand(NativeCommandType.Run, 'keyboard');\n    };\n\n    private submitCell = (possibleContents: string | undefined, moveOp: 'add' | 'select' | 'none') => {\n        let content: string | undefined;\n\n        // If inside editor, submit this code\n        if (possibleContents !== undefined) {\n            content = possibleContents;\n        } else {\n            // Outside editor, just use the cell\n            content = concatMultilineStringInput(this.props.cellVM.cell.data.source);\n        }\n\n        // Send to jupyter\n        if (content) {\n            this.props.executeCell(this.cellId, content, moveOp);\n        }\n    };\n\n    private addNewCell = () => {\n        this.props.insertBelow(this.cellId);\n        this.props.sendCommand(NativeCommandType.AddToEnd, 'mouse');\n    };\n\n    private renderNavbar = () => {\n        const moveUp = () => {\n            this.props.moveCellUp(this.cellId);\n            this.props.sendCommand(NativeCommandType.MoveCellUp, 'mouse');\n        };\n        const moveDown = () => {\n            this.props.moveCellDown(this.cellId);\n            this.props.sendCommand(NativeCommandType.MoveCellDown, 'mouse');\n        };\n        const addButtonRender = !this.props.lastCell ? (\n            <div className=\"navbar-add-button\">\n                <ImageButton baseTheme={this.props.baseTheme} onClick={this.addNewCell} tooltip={getLocString('DataScience.insertBelow', 'Insert cell below')}>\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\n                </ImageButton>\n            </div>\n        ) : null;\n\n        return (\n            <div className=\"navbar-div\">\n                <div>\n                    <ImageButton baseTheme={this.props.baseTheme} onClick={moveUp} disabled={this.props.firstCell} tooltip={getLocString('DataScience.moveCellUp', 'Move cell up')}>\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Up} />\n                    </ImageButton>\n                </div>\n                <div>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={moveDown}\n                        disabled={this.props.lastCell}\n                        tooltip={getLocString('DataScience.moveCellDown', 'Move cell down')}\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Down} />\n                    </ImageButton>\n                </div>\n                {addButtonRender}\n            </div>\n        );\n    };\n\n    private renderAddDivider = (checkOutput: boolean) => {\n        // Skip on the last cell\n        if (!this.props.lastCell) {\n            // Divider should only show if no output\n            if (!checkOutput || !this.shouldRenderOutput()) {\n                return <AddCellLine className=\"add-divider\" baseTheme={this.props.baseTheme} includePlus={false} click={this.addNewCell} />;\n            }\n        }\n\n        return null;\n    };\n\n    private getCurrentCode(): string {\n        // Input may not be open at this time. If not, then use current cell contents.\n        const contents = this.inputRef.current ? this.inputRef.current.getContents() : undefined;\n        return contents || concatMultilineStringInput(this.props.cellVM.cell.data.source);\n    }\n\n    private renderMiddleToolbar = () => {\n        const cellId = this.props.cellVM.cell.id;\n        const runCell = () => {\n            this.runAndMove(this.getCurrentCode());\n            this.props.sendCommand(NativeCommandType.Run, 'mouse');\n        };\n        const gatherCell = () => {\n            this.props.gatherCell(cellId);\n        };\n        const deleteCell = () => {\n            this.props.deleteCell(cellId);\n            this.props.sendCommand(NativeCommandType.DeleteCell, 'mouse');\n        };\n        const gatherDisabled =\n            this.props.cellVM.cell.data.execution_count === null ||\n            this.props.cellVM.hasBeenRun === null ||\n            this.props.cellVM.hasBeenRun === false ||\n            this.isMarkdownCell() ||\n            this.props.enableGather === false;\n        const switchTooltip =\n            this.props.cellVM.cell.data.cell_type === 'code'\n                ? getLocString('DataScience.switchToMarkdown', 'Change to markdown')\n                : getLocString('DataScience.switchToCode', 'Change to code');\n        const otherCellType = this.props.cellVM.cell.data.cell_type === 'code' ? 'markdown' : 'code';\n        const otherCellTypeCommand = otherCellType === 'markdown' ? NativeCommandType.ChangeToMarkdown : NativeCommandType.ChangeToCode;\n        const otherCellImage = otherCellType === 'markdown' ? ImageName.SwitchToMarkdown : ImageName.SwitchToCode;\n        const switchCellType = (event: React.MouseEvent<HTMLButtonElement>) => {\n            // Prevent this mouse click from stealing focus so that we\n            // can give focus to the cell input.\n            event.stopPropagation();\n            event.preventDefault();\n            this.props.changeCellType(cellId, this.getCurrentCode());\n            this.props.sendCommand(otherCellTypeCommand, 'mouse');\n        };\n        const toolbarClassName = this.props.cellVM.cell.data.cell_type === 'code' ? '' : 'markdown-toolbar';\n\n        return (\n            <div className={toolbarClassName}>\n                <div className=\"native-editor-celltoolbar-middle\">\n                    <ImageButton baseTheme={this.props.baseTheme} onClick={runCell} tooltip={getLocString('DataScience.runCell', 'Run cell')} hidden={this.isMarkdownCell()}>\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Run} />\n                    </ImageButton>\n                    <ImageButton baseTheme={this.props.baseTheme} onMouseDown={switchCellType} tooltip={switchTooltip}>\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={otherCellImage} />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={gatherCell}\n                        tooltip={getLocString('DataScience.gatherCell', 'Gather the code required to generate this cell into a new notebook')}\n                        hidden={gatherDisabled}\n                        className=\"hover-cell-button\"\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.GatherCode} />\n                    </ImageButton>\n                    <ImageButton\n                        baseTheme={this.props.baseTheme}\n                        onClick={deleteCell}\n                        tooltip={getLocString('DataScience.deleteCell', 'Delete cell')}\n                        className=\"delete-cell-button hover-cell-button\"\n                    >\n                        <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Delete} />\n                    </ImageButton>\n                </div>\n                <div className=\"native-editor-celltoolbar-divider\" />\n            </div>\n        );\n    };\n\n    private renderControls = () => {\n        const busy = this.props.cellVM.cell.state === CellState.init || this.props.cellVM.cell.state === CellState.executing;\n        const executionCount =\n            this.props.cellVM && this.props.cellVM.cell && this.props.cellVM.cell.data && this.props.cellVM.cell.data.execution_count\n                ? this.props.cellVM.cell.data.execution_count.toString()\n                : '-';\n\n        return (\n            <div className=\"controls-div\">\n                <ExecutionCount isBusy={busy} count={executionCount} visible={this.isCodeCell()} />\n            </div>\n        );\n    };\n\n    private renderInput = () => {\n        if (this.shouldRenderInput()) {\n            return (\n                <div>\n                    {this.renderMiddleToolbar()}\n                    <CellInput\n                        cellVM={this.props.cellVM}\n                        editorOptions={this.props.editorOptions}\n                        history={undefined}\n                        codeTheme={this.props.codeTheme}\n                        onCodeChange={this.onCodeChange}\n                        onCodeCreated={this.onCodeCreated}\n                        testMode={this.props.testMode ? true : false}\n                        showWatermark={false}\n                        ref={this.inputRef}\n                        monacoTheme={this.props.monacoTheme}\n                        openLink={this.openLink}\n                        editorMeasureClassName={undefined}\n                        focused={this.onCodeFocused}\n                        unfocused={this.onCodeUnfocused}\n                        keyDown={this.keyDownInput}\n                        showLineNumbers={this.props.cellVM.showLineNumbers}\n                        font={this.props.font}\n                        focusPending={this.props.focusPending}\n                    />\n                </div>\n            );\n        }\n        return null;\n    };\n\n    private onCodeFocused = () => {\n        this.props.focusCell(this.cellId, CursorPos.Current);\n    };\n\n    private onCodeUnfocused = () => {\n        // Make sure to save the code from the editor into the cell\n        this.props.unfocusCell(this.cellId, this.getCurrentCode());\n    };\n\n    private onCodeChange = (changes: monacoEditor.editor.IModelContentChange[], cellId: string, modelId: string) => {\n        this.props.editCell(cellId, changes, modelId, this.getCurrentCode());\n    };\n\n    private onCodeCreated = (_code: string, _file: string, cellId: string, modelId: string) => {\n        this.props.codeCreated(cellId, modelId);\n    };\n\n    private renderOutput = (): JSX.Element | null => {\n        const themeMatplotlibPlots = this.props.themeMatplotlibPlots ? true : false;\n        const toolbar = this.props.cellVM.cell.data.cell_type === 'markdown' ? this.renderMiddleToolbar() : null;\n        if (this.shouldRenderOutput()) {\n            return (\n                <div>\n                    {toolbar}\n                    <CellOutput\n                        cellVM={this.props.cellVM}\n                        baseTheme={this.props.baseTheme}\n                        expandImage={this.props.showPlot}\n                        maxTextSize={this.props.maxTextSize}\n                        themeMatplotlibPlots={themeMatplotlibPlots}\n                    />\n                </div>\n            );\n        }\n        return null;\n    };\n\n    private onOuterKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // Handle keydown events for the entire cell when we don't have focus\n        if (event.key !== 'Tab' && !this.isFocused()) {\n            this.keyDownInput(this.props.cellVM.cell.id, {\n                code: event.key,\n                shiftKey: event.shiftKey,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                altKey: event.altKey,\n                target: event.target as HTMLDivElement,\n                stopPropagation: () => event.stopPropagation(),\n                preventDefault: () => event.preventDefault()\n            });\n        }\n    };\n\n    private renderCollapseBar = (input: boolean) => {\n        let classes = 'collapse-bar';\n\n        if (this.isSelected() && !this.isFocused()) {\n            classes += ' collapse-bar-selected';\n        }\n        if (this.isFocused()) {\n            classes += ' collapse-bar-focused';\n        }\n\n        if (input) {\n            return <div className={classes}></div>;\n        }\n\n        if (this.props.cellVM.cell.data.cell_type === 'markdown') {\n            classes += ' collapse-bar-markdown';\n        } else if (Array.isArray(this.props.cellVM.cell.data.outputs) && this.props.cellVM.cell.data.outputs.length !== 0) {\n            classes += ' collapse-bar-output';\n        } else {\n            return null;\n        }\n\n        return <div className={classes}></div>;\n    };\n\n    private openLink = (uri: monacoEditor.Uri) => {\n        this.props.linkClick(uri.toString());\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedNativeCell() {\n    return connect(null, actionCreators)(NativeCell);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { OSType } from '../../client/common/utils/platform';\nimport { NativeCommandType } from '../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { concatMultilineStringInput } from '../common';\nimport { ContentPanel, IContentPanelProps } from '../interactive-common/contentPanel';\nimport { handleLinkClick } from '../interactive-common/handlers';\nimport { KernelSelection } from '../interactive-common/kernelSelection';\nimport { ICellViewModel, IMainState } from '../interactive-common/mainState';\nimport { IMainWithVariables, IStore } from '../interactive-common/redux/store';\nimport { IVariablePanelProps, VariablePanel } from '../interactive-common/variablePanel';\nimport { getOSType } from '../react-common/constants';\nimport { ErrorBoundary } from '../react-common/errorBoundary';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { Progress } from '../react-common/progress';\nimport { AddCellLine } from './addCellLine';\nimport { getConnectedNativeCell } from './nativeCell';\nimport './nativeEditor.less';\nimport { actionCreators } from './redux/actions';\n\ntype INativeEditorProps = IMainWithVariables & typeof actionCreators;\n\nfunction mapStateToProps(state: IStore): IMainWithVariables {\n    return { ...state.main, variableState: state.variables };\n}\n\nconst ConnectedNativeCell = getConnectedNativeCell();\n\nexport class NativeEditor extends React.Component<INativeEditorProps> {\n    private renderCount: number = 0;\n    private waitingForLoadRender = true;\n\n    constructor(props: INativeEditorProps) {\n        super(props);\n    }\n\n    public componentDidMount() {\n        this.props.editorLoaded();\n        window.addEventListener('keydown', this.mainKeyDown);\n        window.addEventListener('resize', () => this.forceUpdate(), true);\n        document.addEventListener('click', this.linkClick, true);\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('keydown', this.mainKeyDown);\n        window.removeEventListener('resize', () => this.forceUpdate());\n        document.removeEventListener('click', this.linkClick);\n        this.props.editorUnmounted();\n    }\n\n    public componentDidUpdate(prevProps: IMainState) {\n        if (this.props.loaded && !prevProps.loaded && this.waitingForLoadRender) {\n            this.waitingForLoadRender = false;\n            // After this render is complete (see this SO)\n            // https://stackoverflow.com/questions/26556436/react-after-render-code,\n            // indicate we are done loading. We want to wait for the render\n            // so we get accurate timing on first launch.\n            setTimeout(() => {\n                window.requestAnimationFrame(() => {\n                    this.props.loadedAllCells();\n                });\n            });\n        }\n    }\n\n    public render() {\n        const dynamicFont: React.CSSProperties = {\n            fontSize: this.props.font.size,\n            fontFamily: this.props.font.family\n        };\n\n        // If in test mode, update our count. Use this to determine how many renders a normal update takes.\n        if (this.props.testMode) {\n            this.renderCount = this.renderCount + 1;\n        }\n\n        // Update the state controller with our new state\n        const progressBar = this.props.busy && !this.props.testMode ? <Progress /> : undefined;\n        const addCellLine =\n            this.props.cellVMs.length === 0 ? null : (\n                <AddCellLine includePlus={true} className=\"add-cell-line-top\" click={this.props.insertAboveFirst} baseTheme={this.props.baseTheme} />\n            );\n\n        return (\n            <div id=\"main-panel\" role=\"Main\" style={dynamicFont}>\n                <div className=\"styleSetter\">\n                    <style>{this.props.rootCss}</style>\n                </div>\n                <header id=\"main-panel-toolbar\">\n                    {this.renderToolbarPanel()}\n                    {progressBar}\n                </header>\n                <section id=\"main-panel-variable\" aria-label={getLocString('DataScience.collapseVariableExplorerLabel', 'Variables')}>\n                    {this.renderVariablePanel(this.props.baseTheme)}\n                </section>\n                <main id=\"main-panel-content\">\n                    {addCellLine}\n                    {this.renderContentPanel(this.props.baseTheme)}\n                </main>\n            </div>\n        );\n    }\n\n    // tslint:disable: react-this-binding-issue\n    // tslint:disable-next-line: max-func-body-length\n    private renderToolbarPanel() {\n        const selectedIndex = this.props.cellVMs.findIndex(c => c.cell.id === this.props.selectedCellId);\n\n        const addCell = () => {\n            this.props.addCell();\n            this.props.sendCommand(NativeCommandType.AddToEnd, 'mouse');\n        };\n        const runAll = () => {\n            // Run all cells currently available.\n            this.props.executeAllCells();\n            this.props.sendCommand(NativeCommandType.RunAll, 'mouse');\n        };\n        const save = () => {\n            this.props.save();\n            this.props.sendCommand(NativeCommandType.Save, 'mouse');\n        };\n        const toggleVariableExplorer = () => {\n            this.props.toggleVariableExplorer();\n            this.props.sendCommand(NativeCommandType.ToggleVariableExplorer, 'mouse');\n        };\n        const variableExplorerTooltip = this.props.variableState.visible\n            ? getLocString('DataScience.collapseVariableExplorerTooltip', 'Hide variables active in jupyter kernel')\n            : getLocString('DataScience.expandVariableExplorerTooltip', 'Show variables active in jupyter kernel');\n        const runAbove = () => {\n            if (this.props.selectedCellId) {\n                this.props.executeAbove(this.props.selectedCellId);\n                this.props.sendCommand(NativeCommandType.RunAbove, 'mouse');\n            }\n        };\n        const runBelow = () => {\n            if (this.props.selectedCellId) {\n                // tslint:disable-next-line: no-suspicious-comment\n                // TODO: Is the source going to be up to date during run below?\n                this.props.executeCellAndBelow(this.props.selectedCellId, concatMultilineStringInput(this.props.cellVMs[selectedIndex].cell.data.source));\n                this.props.sendCommand(NativeCommandType.RunBelow, 'mouse');\n            }\n        };\n        const selectKernel = () => {\n            this.props.selectKernel();\n            this.props.sendCommand(NativeCommandType.SelectKernel, 'mouse');\n        };\n        const selectServer = () => {\n            this.props.selectServer();\n            this.props.sendCommand(NativeCommandType.SelectServer, 'mouse');\n        };\n        const canRunAbove = selectedIndex > 0;\n        const canRunBelow = selectedIndex < this.props.cellVMs.length - 1 && this.props.selectedCellId;\n\n        return (\n            <div id=\"toolbar-panel\">\n                <div className=\"toolbar-menu-bar\">\n                    <div className=\"toolbar-menu-bar-child\">\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runAll}\n                            disabled={this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runAll', 'Run All Cells')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.RunAll} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runAbove}\n                            disabled={!canRunAbove || this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runAbove', 'Run cells above')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.RunAbove} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={runBelow}\n                            disabled={!canRunBelow || this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.runBelow', 'Run cell and below')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.RunBelow} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.restartKernel}\n                            disabled={this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.restartServer', 'Restart IPython kernel')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Restart} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.interruptKernel}\n                            disabled={this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.interruptKernel', 'Interrupt IPython kernel')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Interrupt} />\n                        </ImageButton>\n                        <ImageButton baseTheme={this.props.baseTheme} onClick={addCell} className=\"native-button\" tooltip={getLocString('DataScience.addNewCell', 'Insert cell')}>\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.InsertBelow} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.clearAllOutputs}\n                            disabled={!this.props.cellVMs.length}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.clearAllOutput', 'Clear All Output')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.ClearAllOutput} />\n                        </ImageButton>\n                        <ImageButton baseTheme={this.props.baseTheme} onClick={toggleVariableExplorer} className=\"native-button\" tooltip={variableExplorerTooltip}>\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.VariableExplorer} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={save}\n                            disabled={!this.props.dirty}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.save', 'Save File')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.SaveAs} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.export}\n                            disabled={!this.props.cellVMs.length || this.props.busy}\n                            className=\"native-button\"\n                            tooltip={getLocString('DataScience.exportAsPythonFileTooltip', 'Save As Python File')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.ExportToPython} />\n                        </ImageButton>\n                    </div>\n                    <KernelSelection baseTheme={this.props.baseTheme} font={this.props.font} kernel={this.props.kernel} selectServer={selectServer} selectKernel={selectKernel} />\n                </div>\n                <div className=\"toolbar-divider\" />\n            </div>\n        );\n    }\n\n    private renderVariablePanel(baseTheme: string) {\n        if (this.props.variableState.visible) {\n            const variableProps = this.getVariableProps(baseTheme);\n            return <VariablePanel {...variableProps} />;\n        }\n\n        return null;\n    }\n\n    private renderContentPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (!this.props.monacoReady && !this.props.testMode) {\n            return null;\n        }\n\n        // Otherwise render our cells.\n        const contentProps = this.getContentProps(baseTheme);\n        return <ContentPanel {...contentProps} />;\n    }\n\n    private getContentProps = (baseTheme: string): IContentPanelProps => {\n        return {\n            baseTheme: baseTheme,\n            cellVMs: this.props.cellVMs,\n            testMode: this.props.testMode,\n            codeTheme: this.props.codeTheme,\n            submittedText: this.props.submittedText,\n            skipNextScroll: this.props.skipNextScroll ? true : false,\n            editable: true,\n            renderCell: this.renderCell,\n            scrollToBottom: this.scrollDiv\n        };\n    };\n    private getVariableProps = (baseTheme: string): IVariablePanelProps => {\n        return {\n            variables: this.props.variableState.variables,\n            debugging: this.props.debugging,\n            busy: this.props.busy,\n            showDataExplorer: this.props.showDataViewer,\n            skipDefault: this.props.skipDefault,\n            testMode: this.props.testMode,\n            closeVariableExplorer: this.props.toggleVariableExplorer,\n            baseTheme: baseTheme,\n            pageIn: this.pageInVariableData,\n            fontSize: this.props.font.size,\n            executionCount: this.props.currentExecutionCount\n        };\n    };\n\n    private pageInVariableData = (startIndex: number, pageSize: number) => {\n        this.props.getVariableData(this.props.currentExecutionCount, startIndex, pageSize);\n    };\n\n    private mainKeyDown = (event: KeyboardEvent) => {\n        // Handler for key down presses in the main panel\n        switch (event.key) {\n            // tslint:disable-next-line: no-suspicious-comment\n            // TODO: How to have this work for when the keyboard shortcuts are changed?\n            case 's': {\n                if ((event.ctrlKey && getOSType() !== OSType.OSX) || (event.metaKey && getOSType() === OSType.OSX)) {\n                    // This is save, save our cells\n                    this.props.save();\n                    this.props.sendCommand(NativeCommandType.Save, 'keyboard');\n                }\n                break;\n            }\n            case 'z':\n            case 'Z':\n                if (this.props.focusedCellId === undefined) {\n                    if (event.shiftKey && !event.ctrlKey && !event.altKey) {\n                        event.stopPropagation();\n                        this.props.redo();\n                        this.props.sendCommand(NativeCommandType.Redo, 'keyboard');\n                    } else if (!event.shiftKey && !event.altKey && !event.ctrlKey) {\n                        event.stopPropagation();\n                        this.props.undo();\n                        this.props.sendCommand(NativeCommandType.Undo, 'keyboard');\n                    }\n                }\n                break;\n            default:\n                break;\n        }\n    };\n\n    // private copyToClipboard = (cellId: string) => {\n    //     const cell = this.props.findCell(cellId);\n    //     if (cell) {\n    //         // Need to do this in this process so it copies to the user's clipboard and not\n    //         // the remote clipboard where the extension is running\n    //         const textArea = document.createElement('textarea');\n    //         textArea.value = concatMultilineString(cell.cell.data.source);\n    //         document.body.appendChild(textArea);\n    //         textArea.select();\n    //         document.execCommand('Copy');\n    //         textArea.remove();\n    //     }\n    // }\n\n    // private pasteFromClipboard = (cellId: string) => {\n    //     const editedCells = this.props.cellVMs;\n    //     const index = editedCells.findIndex(x => x.cell.id === cellId) + 1;\n\n    //     if (index > -1) {\n    //         const textArea = document.createElement('textarea');\n    //         document.body.appendChild(textArea);\n    //         textArea.select();\n    //         document.execCommand('Paste');\n    //         editedCells[index].cell.data.source = textArea.value.split(/\\r?\\n/);\n    //         textArea.remove();\n    //     }\n\n    //     this.setState({\n    //         cellVMs: editedCells\n    //     });\n    // }\n\n    private renderCell = (cellVM: ICellViewModel, index: number): JSX.Element | null => {\n        // Don't render until we have settings\n        if (!this.props.settings || !this.props.editorOptions) {\n            return null;\n        }\n\n        const addNewCell = () => {\n            this.props.insertBelow(cellVM.cell.id);\n            this.props.sendCommand(NativeCommandType.AddToEnd, 'mouse');\n        };\n        const firstLine = index === 0;\n        const lastLine =\n            index === this.props.cellVMs.length - 1 ? <AddCellLine includePlus={true} baseTheme={this.props.baseTheme} className=\"add-cell-line-cell\" click={addNewCell} /> : null;\n\n        return (\n            <div key={cellVM.cell.id} id={cellVM.cell.id}>\n                <ErrorBoundary>\n                    <ConnectedNativeCell\n                        role=\"listitem\"\n                        maxTextSize={this.props.settings.maxOutputSize}\n                        testMode={this.props.testMode}\n                        cellVM={cellVM}\n                        baseTheme={this.props.baseTheme}\n                        codeTheme={this.props.codeTheme}\n                        monacoTheme={this.props.monacoTheme}\n                        lastCell={lastLine !== null}\n                        firstCell={firstLine}\n                        font={this.props.font}\n                        allowUndo={this.props.undoStack.length > 0}\n                        editorOptions={this.props.editorOptions}\n                        enableGather={this.props.settings.enableGather}\n                        themeMatplotlibPlots={this.props.settings.themeMatplotlibPlots}\n                        focusPending={this.props.activateCount}\n                    />\n                </ErrorBoundary>\n                {lastLine}\n            </div>\n        );\n    };\n\n    private scrollDiv = (_div: HTMLDivElement) => {\n        // Doing nothing for now. This should be implemented once redux refactor is done.\n    };\n\n    private linkClick = (ev: MouseEvent) => {\n        handleLinkClick(ev, this.props.linkClick);\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedNativeEditor() {\n    return connect(mapStateToProps, actionCreators)(NativeEditor);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as uuid from 'uuid/v4';\n\nimport { ILoadAllCells, InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { ICell, IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { createCellVM, createEmptyCell, CursorPos, extractInputText, ICellViewModel, IMainState } from '../../../interactive-common/mainState';\nimport { createPostableAction } from '../../../interactive-common/redux/postOffice';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction } from '../../../interactive-common/redux/reducers/types';\nimport { actionCreators } from '../actions';\nimport { NativeEditorReducerArg } from '../mapping';\n\nexport namespace Creation {\n    function prepareCellVM(cell: ICell, hasBeenRun: boolean, settings?: IDataScienceExtraSettings): ICellViewModel {\n        const cellVM: ICellViewModel = createCellVM(cell, settings, true, false);\n\n        // Set initial cell visibility and collapse\n        cellVM.editable = true;\n\n        // Always have the cell input text open\n        const newText = extractInputText(cellVM, settings);\n\n        cellVM.inputBlockOpen = true;\n        cellVM.inputBlockText = newText;\n        cellVM.hasBeenRun = hasBeenRun;\n\n        return cellVM;\n    }\n\n    function findFirstCodeCellAbove(cellVMs: ICellViewModel[], start: number): string | undefined {\n        for (let index = start; index >= 0; index -= 1) {\n            if (cellVMs[index].cell.data.cell_type === 'code') {\n                return cellVMs[index].cell.id;\n            }\n        }\n    }\n\n    export function insertAbove(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const newVM = prepareCellVM(createEmptyCell(uuid(), null), false, arg.prevState.settings);\n        const newList = [...arg.prevState.cellVMs];\n\n        // Find the position where we want to insert\n        let position = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (position >= 0) {\n            newList.splice(position, 0, newVM);\n        } else {\n            newList.splice(0, 0, newVM);\n            position = 0;\n        }\n\n        const result = {\n            ...arg.prevState,\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            cellVMs: newList\n        };\n\n        // Send a messsage that we inserted a cell\n        arg.queueAction(\n            createPostableAction(InteractiveWindowMessages.InsertCell, { cell: newVM.cell, index: position, code: '', codeCellAboveId: findFirstCodeCellAbove(newList, position) })\n        );\n\n        // Queue up an action to set focus to the cell we're inserting\n        setTimeout(() => {\n            arg.queueAction(actionCreators.focusCell(newVM.cell.id));\n        });\n\n        return result;\n    }\n\n    export function insertBelow(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const newVM = prepareCellVM(createEmptyCell(uuid(), null), false, arg.prevState.settings);\n        const newList = [...arg.prevState.cellVMs];\n\n        // Find the position where we want to insert\n        let position = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        let index = 0;\n        if (position >= 0) {\n            newList.splice(position + 1, 0, newVM);\n            index = position + 1;\n        } else {\n            newList.push(newVM);\n            position = newList.length - 2;\n            index = newList.length - 1;\n        }\n\n        const result = {\n            ...arg.prevState,\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            cellVMs: newList\n        };\n\n        // Send a messsage that we inserted a cell\n        arg.queueAction(\n            createPostableAction(InteractiveWindowMessages.InsertCell, { cell: newVM.cell, index, code: '', codeCellAboveId: findFirstCodeCellAbove(newList, position) })\n        );\n\n        // Queue up an action to set focus to the cell we're inserting\n        setTimeout(() => {\n            arg.queueAction(actionCreators.focusCell(newVM.cell.id));\n        });\n\n        return result;\n    }\n\n    export function insertAboveFirst(arg: NativeEditorReducerArg): IMainState {\n        // Get the first cell id\n        const firstCellId = arg.prevState.cellVMs.length > 0 ? arg.prevState.cellVMs[0].cell.id : undefined;\n\n        // Do what an insertAbove does\n        return insertAbove({ ...arg, payload: { cellId: firstCellId } });\n    }\n\n    export function addNewCell(arg: NativeEditorReducerArg): IMainState {\n        // Do the same thing that an insertBelow does using the currently selected cell.\n        return insertBelow({ ...arg, payload: { cellId: arg.prevState.selectedCellId } });\n    }\n\n    export function startCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function updateCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function finishCell(arg: NativeEditorReducerArg<ICell>): IMainState {\n        return Helpers.updateOrAdd(arg, (c: ICell, s: IMainState) => prepareCellVM(c, true, s.settings));\n    }\n\n    export function deleteAllCells(arg: NativeEditorReducerArg): IMainState {\n        // Send messages to other side to indicate the deletes\n        arg.queueAction(createPostableAction(InteractiveWindowMessages.DeleteAllCells));\n\n        // Just leave one single blank empty cell\n        const newVM: ICellViewModel = {\n            cell: createEmptyCell(uuid(), null),\n            editable: true,\n            inputBlockOpen: true,\n            inputBlockShow: true,\n            inputBlockText: '',\n            inputBlockCollapseNeeded: false,\n            selected: false,\n            focused: false,\n            cursorPos: CursorPos.Current,\n            hasBeenRun: false,\n            scrollCount: 0\n        };\n\n        arg.queueAction(createPostableAction(InteractiveWindowMessages.InsertCell, { cell: newVM.cell, code: '', index: 0, codeCellAboveId: undefined }));\n\n        return {\n            ...arg.prevState,\n            cellVMs: [newVM],\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            selectedCellId: undefined,\n            focusedCellId: undefined\n        };\n    }\n\n    export function deleteCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const cells = arg.prevState.cellVMs;\n        if (cells.length === 1 && cells[0].cell.id === arg.payload.cellId) {\n            // Special case, if this is the last cell, don't delete it, just clear it's output and input\n            const newVM: ICellViewModel = {\n                cell: createEmptyCell(arg.payload.cellId, null),\n                editable: true,\n                inputBlockOpen: true,\n                inputBlockShow: true,\n                inputBlockText: '',\n                inputBlockCollapseNeeded: false,\n                selected: cells[0].selected,\n                focused: cells[0].focused,\n                cursorPos: CursorPos.Current,\n                hasBeenRun: false,\n                scrollCount: 0\n            };\n\n            // Send messages to other side to indicate the new add\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.DeleteCell));\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.RemoveCell, { id: arg.payload.cellId }));\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.InsertCell, { cell: newVM.cell, code: '', index: 0, codeCellAboveId: undefined }));\n\n            return {\n                ...arg.prevState,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                cellVMs: [newVM]\n            };\n        } else if (arg.payload.cellId) {\n            // Otherwise just a straight delete\n            const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n            if (index >= 0) {\n                arg.queueAction(createPostableAction(InteractiveWindowMessages.DeleteCell));\n                arg.queueAction(createPostableAction(InteractiveWindowMessages.RemoveCell, { id: arg.payload.cellId }));\n\n                // Recompute select/focus if this item has either\n                let newSelection = arg.prevState.selectedCellId;\n                let newFocused = arg.prevState.focusedCellId;\n                const newVMs = [...arg.prevState.cellVMs.filter(c => c.cell.id !== arg.payload.cellId)];\n                const nextOrPrev = index === arg.prevState.cellVMs.length - 1 ? index - 1 : index;\n                if (arg.prevState.selectedCellId === arg.payload.cellId || arg.prevState.focusedCellId === arg.payload.cellId) {\n                    if (nextOrPrev >= 0) {\n                        newVMs[nextOrPrev] = { ...newVMs[nextOrPrev], selected: true, focused: arg.prevState.focusedCellId === arg.payload.cellId };\n                        newSelection = newVMs[nextOrPrev].cell.id;\n                        newFocused = newVMs[nextOrPrev].focused ? newVMs[nextOrPrev].cell.id : undefined;\n                    }\n                }\n\n                return {\n                    ...arg.prevState,\n                    cellVMs: newVMs,\n                    selectedCellId: newSelection,\n                    focusedCellId: newFocused,\n                    undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                    skipNextScroll: true\n                };\n            }\n        }\n\n        return arg.prevState;\n    }\n\n    export function loadAllCells(arg: NativeEditorReducerArg<ILoadAllCells>): IMainState {\n        const vms = arg.payload.cells.map(c => prepareCellVM(c, false, arg.prevState.settings));\n        return {\n            ...arg.prevState,\n            busy: false,\n            loadTotal: arg.payload.cells.length,\n            undoStack: [],\n            cellVMs: vms,\n            loaded: true\n        };\n    }\n\n    export function unmount(arg: NativeEditorReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: [],\n            redoStack: []\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { CssMessages } from '../../../../client/datascience/messages';\nimport { IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { IMainState } from '../../../interactive-common/mainState';\nimport { createPostableAction } from '../../../interactive-common/redux/postOffice';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction, ICellAndCursorAction, ICodeAction } from '../../../interactive-common/redux/reducers/types';\nimport { computeEditorOptions } from '../../../react-common/settingsReactSide';\nimport { NativeEditorReducerArg } from '../mapping';\n\nexport namespace Effects {\n    export function focusCell(arg: NativeEditorReducerArg<ICellAndCursorAction>): IMainState {\n        // Do nothing if already the focused cell.\n        if (arg.prevState.focusedCellId !== arg.payload.cellId) {\n            let prevState = arg.prevState;\n\n            // First find the old focused cell and unfocus it\n            let removeFocusIndex = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.prevState.focusedCellId);\n            if (removeFocusIndex < 0) {\n                removeFocusIndex = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.prevState.selectedCellId);\n            }\n\n            if (removeFocusIndex >= 0) {\n                const oldFocusCell = prevState.cellVMs[removeFocusIndex];\n                const oldCode = oldFocusCell.uncomittedText || oldFocusCell.inputBlockText;\n                prevState = unfocusCell({ ...arg, prevState, payload: { cellId: prevState.cellVMs[removeFocusIndex].cell.id, code: oldCode } });\n                prevState = deselectCell({ ...arg, prevState, payload: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } });\n            }\n\n            const newVMs = [...prevState.cellVMs];\n\n            // Add focus on new cell\n            const addFocusIndex = newVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n            if (addFocusIndex >= 0) {\n                newVMs[addFocusIndex] = { ...newVMs[addFocusIndex], focused: true, selected: true, cursorPos: arg.payload.cursorPos };\n            }\n\n            return {\n                ...prevState,\n                cellVMs: newVMs,\n                focusedCellId: arg.payload.cellId,\n                selectedCellId: arg.payload.cellId\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function unfocusCell(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        // Unfocus the cell\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index >= 0 && arg.prevState.focusedCellId === arg.payload.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...current,\n                inputBlockText: arg.payload.code,\n                focused: false,\n                cell: {\n                    ...current.cell,\n                    data: {\n                        ...current.cell.data,\n                        source: arg.payload.code\n                    }\n                }\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = Helpers.asCellViewModel(newCell); // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                focusedCellId: undefined\n            };\n        } else if (index >= 0) {\n            // Dont change focus state if not the focused cell. Just update the code.\n            const newVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...current,\n                inputBlockText: arg.payload.code,\n                cell: {\n                    ...current.cell,\n                    data: {\n                        ...current.cell.data,\n                        source: arg.payload.code\n                    }\n                }\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function deselectCell(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index >= 0 && arg.prevState.selectedCellId === arg.payload.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const target = arg.prevState.cellVMs[index];\n            const newCell = {\n                ...target,\n                selected: false\n            };\n\n            // tslint:disable-next-line: no-any\n            newVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here\n\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                selectedCellId: undefined\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    /**\n     * Select a cell.\n     *\n     * @param {boolean} [shouldFocusCell] If provided, then will control the focus behavior of the cell. (defaults to focus state of previously selected cell).\n     */\n    export function selectCell(arg: NativeEditorReducerArg<ICellAndCursorAction>, shouldFocusCell?: boolean): IMainState {\n        // Skip doing anything if already selected.\n        if (arg.payload.cellId !== arg.prevState.selectedCellId) {\n            let prevState = arg.prevState;\n            const addIndex = prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n            const anotherCellWasFocusedAndSelected = typeof prevState.focusedCellId === 'string' && prevState.focusedCellId === prevState.selectedCellId;\n            const shouldSetFocusToCell = typeof shouldFocusCell === 'boolean' ? shouldFocusCell : anotherCellWasFocusedAndSelected;\n            // First find the old focused cell and unfocus it\n            let removeFocusIndex = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.prevState.focusedCellId);\n            if (removeFocusIndex < 0) {\n                removeFocusIndex = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.prevState.selectedCellId);\n            }\n\n            if (removeFocusIndex >= 0) {\n                const oldFocusCell = prevState.cellVMs[removeFocusIndex];\n                const oldCode = oldFocusCell.uncomittedText || oldFocusCell.inputBlockText;\n                prevState = unfocusCell({ ...arg, prevState, payload: { cellId: prevState.cellVMs[removeFocusIndex].cell.id, code: oldCode } });\n                prevState = deselectCell({ ...arg, prevState, payload: { cellId: prevState.cellVMs[removeFocusIndex].cell.id } });\n            }\n\n            const newVMs = [...prevState.cellVMs];\n            if (addIndex >= 0 && arg.payload.cellId !== prevState.selectedCellId) {\n                newVMs[addIndex] = {\n                    ...newVMs[addIndex],\n                    focused: shouldSetFocusToCell,\n                    selected: true,\n                    cursorPos: arg.payload.cursorPos\n                };\n            }\n\n            return {\n                ...prevState,\n                cellVMs: newVMs,\n                focusedCellId: shouldSetFocusToCell ? arg.payload.cellId : undefined,\n                selectedCellId: arg.payload.cellId\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleLineNumbers(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = { ...newVMs[index], showLineNumbers: !newVMs[index].showLineNumbers };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleOutput(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n            newVMs[index] = { ...newVMs[index], hideOutput: !newVMs[index].hideOutput };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function updateSettings(arg: NativeEditorReducerArg<string>): IMainState {\n        // String arg should be the IDataScienceExtraSettings\n        const newSettingsJSON = JSON.parse(arg.payload);\n        const newSettings = <IDataScienceExtraSettings>newSettingsJSON;\n        const newEditorOptions = computeEditorOptions(newSettings);\n        const newFontFamily = newSettings.extraSettings ? newSettings.extraSettings.fontFamily : arg.prevState.font.family;\n        const newFontSize = newSettings.extraSettings ? newSettings.extraSettings.fontSize : arg.prevState.font.size;\n\n        // Ask for new theme data if necessary\n        if (newSettings && newSettings.extraSettings && newSettings.extraSettings.theme !== arg.prevState.vscodeThemeName) {\n            const knownDark = Helpers.computeKnownDark(newSettings);\n            // User changed the current theme. Rerender\n            arg.queueAction(createPostableAction(CssMessages.GetCssRequest, { isDark: knownDark }));\n            arg.queueAction(createPostableAction(CssMessages.GetMonacoThemeRequest, { isDark: knownDark }));\n        }\n\n        return {\n            ...arg.prevState,\n            settings: newSettings,\n            editorOptions: { ...newEditorOptions, lineDecorationsWidth: 5 },\n            font: {\n                size: newFontSize,\n                family: newFontFamily\n            }\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n// tslint:disable-next-line: no-require-imports no-var-requires\nconst cloneDeep = require('lodash/cloneDeep');\nimport { CellMatcher } from '../../../../client/datascience/cellMatcher';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CellState } from '../../../../client/datascience/types';\nimport { concatMultilineStringInput } from '../../../common';\nimport { createCellFrom } from '../../../common/cellFactory';\nimport { CursorPos, ICellViewModel, IMainState } from '../../../interactive-common/mainState';\nimport { createPostableAction } from '../../../interactive-common/redux/postOffice';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { CommonActionType, ICellAction, IChangeCellTypeAction, ICodeAction, IExecuteAction } from '../../../interactive-common/redux/reducers/types';\nimport { QueueAnotherFunc } from '../../../react-common/reduxUtils';\nimport { NativeEditorReducerArg } from '../mapping';\nimport { Creation } from './creation';\nimport { Effects } from './effects';\n\nexport namespace Execution {\n    function executeRange(prevState: IMainState, start: number, end: number, codes: string[], queueAction: QueueAnotherFunc<CommonActionType>): IMainState {\n        const newVMs = [...prevState.cellVMs];\n        for (let pos = start; pos <= end; pos += 1) {\n            const orig = prevState.cellVMs[pos];\n            const code = codes[pos - start];\n            // noop if the submitted code is just a cell marker\n            const matcher = new CellMatcher(prevState.settings);\n            if (code && matcher.stripFirstMarker(code).length > 0) {\n                // When cloning cells, preserve the metadata (hence deep clone).\n                const clonedCell = cloneDeep(orig.cell.data);\n                clonedCell.source = code;\n                if (orig.cell.data.cell_type === 'code') {\n                    // Update our input cell to be in progress again and clear outputs\n                    clonedCell.outputs = [];\n                    newVMs[pos] = Helpers.asCellViewModel({\n                        ...orig,\n                        inputBlockText: code,\n                        cell: { ...orig.cell, state: CellState.executing, data: clonedCell }\n                    });\n\n                    // Send a message if a code cell\n                    queueAction(createPostableAction(InteractiveWindowMessages.ReExecuteCell, { code, id: orig.cell.id }));\n                } else {\n                    // Update our input to be our new code\n                    newVMs[pos] = Helpers.asCellViewModel({ ...orig, inputBlockText: code, cell: { ...orig.cell, data: clonedCell } });\n                }\n            }\n        }\n\n        return {\n            ...prevState,\n            cellVMs: newVMs\n        };\n    }\n\n    export function executeAbove(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index > 0) {\n            const codes = arg.prevState.cellVMs.filter((_c, i) => i < index).map(c => concatMultilineStringInput(c.cell.data.source));\n            return executeRange(arg.prevState, 0, index - 1, codes, arg.queueAction);\n        }\n        return arg.prevState;\n    }\n\n    export function executeCell(arg: NativeEditorReducerArg<IExecuteAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index >= 0) {\n            // Start executing this cell.\n            const executeResult = executeRange(arg.prevState, index, index, [arg.payload.code], arg.queueAction);\n\n            // Modify the execute result if moving\n            switch (arg.payload.moveOp) {\n                case 'add':\n                    // Add a new cell below\n                    return Creation.insertBelow({ ...arg, prevState: executeResult });\n\n                case 'select':\n                    // Select the cell below this one, but don't focus it\n                    if (index < arg.prevState.cellVMs.length - 1) {\n                        return Effects.selectCell(\n                            {\n                                ...arg,\n                                prevState: {\n                                    ...executeResult\n                                },\n                                payload: {\n                                    ...arg.payload,\n                                    cellId: arg.prevState.cellVMs[index + 1].cell.id,\n                                    cursorPos: CursorPos.Current\n                                }\n                            },\n                            false\n                        );\n                    }\n                    return executeResult;\n\n                default:\n                    return executeResult;\n            }\n        }\n        return arg.prevState;\n    }\n\n    export function executeCellAndBelow(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index >= 0) {\n            const codes = arg.prevState.cellVMs.filter((_c, i) => i > index).map(c => concatMultilineStringInput(c.cell.data.source));\n            return executeRange(arg.prevState, index, index + codes.length, [arg.payload.code, ...codes], arg.queueAction);\n        }\n        return arg.prevState;\n    }\n\n    export function executeAllCells(arg: NativeEditorReducerArg): IMainState {\n        // This is the same thing as executing the first cell and all below\n        const firstCell = arg.prevState.cellVMs.length > 0 ? arg.prevState.cellVMs[0].cell.id : undefined;\n        if (firstCell) {\n            return executeCellAndBelow({ ...arg, payload: { cellId: firstCell, code: concatMultilineStringInput(arg.prevState.cellVMs[0].cell.data.source) } });\n        }\n\n        return arg.prevState;\n    }\n\n    export function executeSelectedCell(arg: NativeEditorReducerArg): IMainState {\n        // This is the same thing as executing the selected cell\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.prevState.selectedCellId);\n        if (arg.prevState.selectedCellId && index >= 0) {\n            return executeCell({\n                ...arg,\n                payload: { cellId: arg.prevState.selectedCellId, code: concatMultilineStringInput(arg.prevState.cellVMs[index].cell.data.source), moveOp: 'none' }\n            });\n        }\n\n        return arg.prevState;\n    }\n\n    export function clearAllOutputs(arg: NativeEditorReducerArg): IMainState {\n        const newList = arg.prevState.cellVMs.map(cellVM => {\n            return Helpers.asCellViewModel({ ...cellVM, cell: { ...cellVM.cell, data: { ...cellVM.cell.data, outputs: [], execution_count: null } } });\n        });\n\n        arg.queueAction(createPostableAction(InteractiveWindowMessages.ClearAllOutputs));\n\n        return {\n            ...arg.prevState,\n            cellVMs: newList\n        };\n    }\n\n    export function changeCellType(arg: NativeEditorReducerArg<IChangeCellTypeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index >= 0) {\n            const cellVMs = [...arg.prevState.cellVMs];\n            const current = arg.prevState.cellVMs[index];\n            const newType = current.cell.data.cell_type === 'code' ? 'markdown' : 'code';\n            const newNotebookCell = createCellFrom(current.cell.data, newType);\n            newNotebookCell.source = arg.payload.currentCode;\n            const newCell: ICellViewModel = {\n                ...current,\n                inputBlockText: arg.payload.currentCode,\n                cell: {\n                    ...current.cell,\n                    data: newNotebookCell\n                }\n            };\n            // tslint:disable-next-line: no-any\n            cellVMs[index] = newCell as any; // This is because IMessageCell doesn't fit in here. But message cells can't change type\n            if (newType === 'code') {\n                arg.queueAction(\n                    createPostableAction(InteractiveWindowMessages.InsertCell, {\n                        cell: cellVMs[index].cell,\n                        index,\n                        code: arg.payload.currentCode,\n                        codeCellAboveId: Helpers.firstCodeCellAbove(arg.prevState, current.cell.id)\n                    })\n                );\n            } else {\n                arg.queueAction(createPostableAction(InteractiveWindowMessages.RemoveCell, { id: current.cell.id }));\n            }\n\n            // When changing a cell type, also give the cell focus.\n            return Effects.focusCell({ ...arg, prevState: { ...arg.prevState, cellVMs }, payload: { cellId: arg.payload.cellId, cursorPos: CursorPos.Current } });\n        }\n\n        return arg.prevState;\n    }\n\n    export function undo(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.undoStack.length > 0) {\n            // Pop one off of our undo stack and update our redo\n            const cells = arg.prevState.undoStack[arg.prevState.undoStack.length - 1];\n            const undoStack = arg.prevState.undoStack.slice(0, arg.prevState.undoStack.length - 1);\n            const selected = cells.findIndex(c => c.selected);\n            const redoStack = Helpers.pushStack(arg.prevState.redoStack, arg.prevState.cellVMs);\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.Undo));\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true,\n                selectedCellId: selected >= 0 ? cells[selected].cell.id : undefined,\n                focusedCellId: selected >= 0 && cells[selected].focused ? cells[selected].cell.id : undefined\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function redo(arg: NativeEditorReducerArg): IMainState {\n        if (arg.prevState.redoStack.length > 0) {\n            // Pop one off of our redo stack and update our undo\n            const cells = arg.prevState.redoStack[arg.prevState.redoStack.length - 1];\n            const redoStack = arg.prevState.redoStack.slice(0, arg.prevState.redoStack.length - 1);\n            const undoStack = Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs);\n            const selected = cells.findIndex(c => c.selected);\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.Redo));\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true,\n                selectedCellId: selected >= 0 ? cells[selected].cell.id : undefined,\n                focusedCellId: selected >= 0 && cells[selected].focused ? cells[selected].cell.id : undefined\n            };\n        }\n\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CursorPos, IMainState } from '../../../interactive-common/mainState';\nimport { createPostableAction } from '../../../interactive-common/redux/postOffice';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction, ICodeAction } from '../../../interactive-common/redux/reducers/types';\nimport { NativeEditorReducerArg } from '../mapping';\nimport { Effects } from './effects';\n\nexport namespace Movement {\n    export function moveCellUp(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const newVMs = [...arg.prevState.cellVMs];\n        const index = newVMs.findIndex(cvm => cvm.cell.id === arg.payload.cellId);\n        if (index > 0) {\n            [newVMs[index - 1], newVMs[index]] = [newVMs[index], newVMs[index - 1]];\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.SwapCells, { firstCellId: arg.payload.cellId!, secondCellId: newVMs[index].cell.id }));\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function moveCellDown(arg: NativeEditorReducerArg<ICellAction>): IMainState {\n        const newVMs = [...arg.prevState.cellVMs];\n        const index = newVMs.findIndex(cvm => cvm.cell.id === arg.payload.cellId);\n        if (index < newVMs.length - 1) {\n            [newVMs[index + 1], newVMs[index]] = [newVMs[index], newVMs[index + 1]];\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.SwapCells, { firstCellId: arg.payload.cellId!, secondCellId: newVMs[index].cell.id }));\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function arrowUp(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index > 0) {\n            const newState = Effects.selectCell({ ...arg, payload: { cellId: arg.prevState.cellVMs[index - 1].cell.id, cursorPos: CursorPos.Bottom } });\n            const newVMs = [...newState.cellVMs];\n            newVMs[index] = Helpers.asCellViewModel({\n                ...newVMs[index],\n                inputBlockText: arg.payload.code,\n                cell: { ...newVMs[index].cell, data: { ...newVMs[index].cell.data, source: arg.payload.code } }\n            });\n            return {\n                ...newState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function arrowDown(arg: NativeEditorReducerArg<ICodeAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index < arg.prevState.cellVMs.length - 1) {\n            const newState = Effects.selectCell({ ...arg, payload: { cellId: arg.prevState.cellVMs[index + 1].cell.id, cursorPos: CursorPos.Top } });\n            const newVMs = [...newState.cellVMs];\n            newVMs[index] = Helpers.asCellViewModel({\n                ...newVMs[index],\n                inputBlockText: arg.payload.code,\n                cell: { ...newVMs[index].cell, data: { ...newVMs[index].cell.data, source: arg.payload.code } }\n            });\n            return {\n                ...newState,\n                cellVMs: newVMs\n            };\n        }\n\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { IncomingMessageActions } from '../../../interactive-common/redux/postOffice';\nimport { CommonEffects } from '../../../interactive-common/redux/reducers/commonEffects';\nimport { Kernel } from '../../../interactive-common/redux/reducers/kernel';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType } from '../../../interactive-common/redux/reducers/types';\nimport { INativeEditorActionMapping } from '../mapping';\nimport { Creation } from './creation';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\nimport { Movement } from './movement';\n\n// The list of reducers. 1 per message/action.\nexport const reducerMap: INativeEditorActionMapping = {\n    // State updates\n    [CommonActionType.INSERT_ABOVE]: Creation.insertAbove,\n    [CommonActionType.INSERT_ABOVE_FIRST]: Creation.insertAboveFirst,\n    [CommonActionType.INSERT_BELOW]: Creation.insertBelow,\n    [CommonActionType.FOCUS_CELL]: Effects.focusCell,\n    [CommonActionType.UNFOCUS_CELL]: Effects.unfocusCell,\n    [CommonActionType.ADD_NEW_CELL]: Creation.addNewCell,\n    [CommonActionType.EXECUTE_CELL]: Execution.executeCell,\n    [CommonActionType.EXECUTE_ALL_CELLS]: Execution.executeAllCells,\n    [CommonActionType.EXECUTE_ABOVE]: Execution.executeAbove,\n    [CommonActionType.EXECUTE_CELL_AND_BELOW]: Execution.executeCellAndBelow,\n    [CommonActionType.RESTART_KERNEL]: Kernel.restartKernel,\n    [CommonActionType.INTERRUPT_KERNEL]: Kernel.interruptKernel,\n    [CommonActionType.CLEAR_ALL_OUTPUTS]: Execution.clearAllOutputs,\n    [CommonActionType.EXPORT]: Transfer.exportCells,\n    [CommonActionType.SAVE]: Transfer.save,\n    [CommonActionType.SHOW_DATA_VIEWER]: Transfer.showDataViewer,\n    [CommonActionType.SEND_COMMAND]: Transfer.sendCommand,\n    [CommonActionType.SELECT_CELL]: Effects.selectCell,\n    [CommonActionType.SELECT_KERNEL]: Kernel.selectKernel,\n    [CommonActionType.SELECT_SERVER]: Kernel.selectJupyterURI,\n    [CommonActionType.MOVE_CELL_UP]: Movement.moveCellUp,\n    [CommonActionType.MOVE_CELL_DOWN]: Movement.moveCellDown,\n    [CommonActionType.DELETE_CELL]: Creation.deleteCell,\n    [CommonActionType.TOGGLE_LINE_NUMBERS]: Effects.toggleLineNumbers,\n    [CommonActionType.TOGGLE_OUTPUT]: Effects.toggleOutput,\n    [CommonActionType.CHANGE_CELL_TYPE]: Execution.changeCellType,\n    [CommonActionType.UNDO]: Execution.undo,\n    [CommonActionType.REDO]: Execution.redo,\n    [CommonActionType.ARROW_UP]: Movement.arrowUp,\n    [CommonActionType.ARROW_DOWN]: Movement.arrowDown,\n    [CommonActionType.EDIT_CELL]: Transfer.editCell,\n    [CommonActionType.SHOW_PLOT]: Transfer.showPlot,\n    [CommonActionType.LINK_CLICK]: Transfer.linkClick,\n    [CommonActionType.GATHER_CELL]: Transfer.gather,\n    [CommonActionType.EDITOR_LOADED]: Transfer.started,\n    [CommonActionType.LOADED_ALL_CELLS]: Transfer.loadedAllCells,\n    [CommonActionType.UNMOUNT]: Creation.unmount,\n\n    // Messages from the webview (some are ignored)\n    [IncomingMessageActions.STARTCELL]: Creation.startCell,\n    [IncomingMessageActions.FINISHCELL]: Creation.finishCell,\n    [IncomingMessageActions.UPDATECELL]: Creation.updateCell,\n    [IncomingMessageActions.NOTEBOOKDIRTY]: CommonEffects.notebookDirty,\n    [IncomingMessageActions.NOTEBOOKCLEAN]: CommonEffects.notebookClean,\n    [IncomingMessageActions.LOADALLCELLS]: Creation.loadAllCells,\n    [IncomingMessageActions.NOTEBOOKRUNALLCELLS]: Execution.executeAllCells,\n    [IncomingMessageActions.NOTEBOOKRUNSELECTEDCELL]: Execution.executeSelectedCell,\n    [IncomingMessageActions.NOTEBOOKADDCELLBELOW]: Creation.addNewCell,\n    [IncomingMessageActions.DOSAVE]: Transfer.save,\n    [IncomingMessageActions.DELETEALLCELLS]: Creation.deleteAllCells,\n    [IncomingMessageActions.UNDO]: Execution.undo,\n    [IncomingMessageActions.REDO]: Execution.redo,\n    [IncomingMessageActions.STARTPROGRESS]: CommonEffects.startProgress,\n    [IncomingMessageActions.STOPPROGRESS]: CommonEffects.stopProgress,\n    [IncomingMessageActions.UPDATESETTINGS]: Effects.updateSettings,\n    [IncomingMessageActions.ACTIVATE]: CommonEffects.activate,\n    [IncomingMessageActions.RESTARTKERNEL]: Kernel.handleRestarted,\n    [IncomingMessageActions.GETCSSRESPONSE]: CommonEffects.handleCss,\n    [IncomingMessageActions.MONACOREADY]: CommonEffects.monacoReady,\n    [IncomingMessageActions.GETMONACOTHEMERESPONSE]: CommonEffects.monacoThemeChange,\n    [IncomingMessageActions.UPDATEKERNEL]: Kernel.updateStatus,\n    [IncomingMessageActions.LOCINIT]: CommonEffects.handleLocInit\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\n// This must be on top, do not change. Required by webpack.\nimport '../common/main';\n// This must be on top, do not change. Required by webpack.\n\n// tslint:disable-next-line: ordered-imports\nimport '../common/index.css';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { IVsCodeApi } from '../react-common/postOffice';\nimport { detectBaseTheme } from '../react-common/themeDetector';\nimport { getConnectedNativeEditor } from './nativeEditor';\nimport { createStore } from './redux/store';\n\n// This special function talks to vscode from a web panel\nexport declare function acquireVsCodeApi(): IVsCodeApi;\nconst baseTheme = detectBaseTheme();\n// tslint:disable-next-line: no-any\nconst testMode = (window as any).inTestMode;\n// tslint:disable-next-line: no-typeof-undefined\nconst skipDefault = testMode ? false : typeof acquireVsCodeApi !== 'undefined';\n\n// Create the redux store\nconst store = createStore(skipDefault, baseTheme, testMode);\n\n// Wire up a connected react control for our NativeEditor\nconst ConnectedNativeEditor = getConnectedNativeEditor();\n\n// Stick them all together\n// tslint:disable:no-typeof-undefined\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedNativeEditor />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as ReduxCommon from '../../interactive-common/redux/store';\nimport { reducerMap } from './reducers';\n\n// This special version uses the reducer map from the INativeEditorMapping\nexport function createStore(skipDefault: boolean, baseTheme: string, testMode: boolean) {\n    return ReduxCommon.createStore(skipDefault, baseTheme, testMode, true, reducerMap);\n}\n","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../node_modules/css-loader/index.js!../interactive-common/common.css\"), \"\");\n\n// module\nexports.push([module.id, \"/* Import common styles and then override them below */\\n:root {\\n  --right-offset-px: 94px;\\n}\\n.toolbar-panel-button {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.measure-editor-div {\\n  width: 90vw;\\n  visibility: hidden;\\n  position: absolute;\\n}\\n.cell-wrapper {\\n  margin: 2px 2px 0px 0px;\\n  position: relative;\\n  min-height: 55px;\\n}\\n.cell-wrapper-focused {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-wrapper-selected {\\n  margin: 2px 2px 0px 0px;\\n}\\n.cell-menu-bar-outer {\\n  justify-self: right;\\n}\\n.cell-output {\\n  margin-top: 5px;\\n  background: transparent;\\n  width: calc(100vw - var(--right-offset-px));\\n  overflow-x: scroll;\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.markdown-cell-output-container {\\n  grid-row: 1;\\n  grid-column: 3;\\n}\\n.markdown-cell-output {\\n  width: calc(100vw - var(--right-offset-px));\\n  overflow-x: scroll;\\n}\\n.cell-outer {\\n  display: grid;\\n  grid-template-columns: auto auto 1fr;\\n}\\n.cell-outer-editable {\\n  display: grid;\\n  grid-template-columns: auto auto 1fr;\\n  margin-top: 0px;\\n}\\n.cell-state-selector {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  text-align: center;\\n  overflow: hidden;\\n  margin-left: 2px;\\n  padding: 2px;\\n  background-color: transparent;\\n  cursor: hand;\\n}\\n.cell-state-selector-option {\\n  border-width: 1px;\\n  border-style: solid;\\n  border-color: var(--override-badge-background, var(--vscode-badge-background));\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n  background-color: var(--override-background, var(--vscode-editor-background));\\n}\\n.code-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 8px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.markdown-editor-area {\\n  position: relative;\\n  width: 100%;\\n  padding-right: 10px;\\n  margin-bottom: 0px;\\n  padding-left: 2px;\\n  padding-top: 2px;\\n  background: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.code-watermark {\\n  top: 5px;\\n  /* Account for extra padding and border in native editor */\\n}\\n.cell-input {\\n  margin: 2px 10px 0px 0px;\\n  grid-column: 3;\\n  grid-row: 1;\\n  min-width: calc(100% - var(--right-offset-px));\\n}\\n.content-div {\\n  grid-column: 3;\\n}\\n.controls-div {\\n  min-width: 34px;\\n  padding-left: 4px;\\n  padding-right: 4px;\\n  display: block;\\n  grid-column: 2;\\n  grid-row: 1;\\n}\\n.navbar-div {\\n  grid-column: 1;\\n  visibility: hidden;\\n  display: grid;\\n  grid-template-rows: var(--button-size) var(--button-size) auto;\\n}\\n.navbar-add-button {\\n  align-self: end;\\n}\\n.execution-count {\\n  justify-self: end;\\n  margin-bottom: 10px;\\n  margin-top: 1px;\\n}\\n.execution-count-busy-outer {\\n  justify-self: end;\\n}\\n.native-editor-celltoolbar-inner {\\n  justify-self: center;\\n  grid-column: 1;\\n}\\n.native-editor-celltoolbar-middle {\\n  display: flex;\\n  grid-column: 3;\\n  grid-row: 2;\\n  justify-items: left;\\n  background: var(--vscode-notifications-background);\\n}\\n.native-editor-celltoolbar-divider {\\n  background-color: var(--vscode-badge-background);\\n  height: 2px;\\n}\\n.code-toolbar {\\n  visibility: visible;\\n}\\n.markdown-toolbar {\\n  visibility: collapse;\\n}\\n.hover-cell-button {\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .hover-cell-button {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .hover-cell-button {\\n  visibility: visible;\\n}\\n.delete-cell-button {\\n  right: 2px;\\n  position: absolute;\\n  visibility: collapse;\\n}\\n.cell-wrapper:hover .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .navbar-div {\\n  visibility: visible;\\n}\\n.cell-wrapper:hover .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-selected .markdown-toolbar {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .markdown-toolbar {\\n  visibility: visible;\\n}\\n.native-editor-flyout-button {\\n  width: auto;\\n  height: auto;\\n  border-color: transparent;\\n  background-color: transparent;\\n  padding: 0px;\\n  margin-left: 4px;\\n  margin-right: 0px;\\n  margin-top: 0px;\\n  margin-bottom: 0px;\\n  border-width: 0px;\\n}\\n.native-editor-flyout-button:focus {\\n  outline: none;\\n}\\n.native-editor-cellflyout {\\n  position: relative;\\n  left: 20px;\\n  top: -15px;\\n  width: auto;\\n  height: auto;\\n  padding-top: 2px;\\n  padding-right: 2px;\\n  z-index: 100;\\n}\\n.native-editor-cellflyout-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.native-editor-cellflyout-focused {\\n  background-color: var(--vscode-editorInfo-foreground);\\n}\\n.flyout-button-content {\\n  color: var(--override-foreground, var(--vscode-editor-foreground));\\n}\\n.native-button {\\n  margin-top: 3px;\\n  background: var(--override-background, var(--vscode-editor-background));\\n  z-index: 10;\\n}\\n#toolbar-panel {\\n  margin-top: 2px;\\n  margin-bottom: 2px;\\n  margin-left: 0px;\\n  margin-right: 0px;\\n}\\n#content-panel-div {\\n  overflow: hidden;\\n}\\n/* Fix image buttons that are supposed to be hidden from showing up */\\n.flyout-children-hidden .image-button {\\n  width: 0px;\\n  height: 0px;\\n  margin-left: 0px;\\n  padding: 0px;\\n}\\n.add-cell-line {\\n  display: flex;\\n  justify-content: left;\\n  margin-top: 5px;\\n  margin-bottom: 0px;\\n  margin-left: 5px;\\n  margin-right: 5px;\\n}\\n.add-cell-line:focus-within {\\n  outline: 1px solid black;\\n}\\n.add-cell-line-top {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top-force-visible {\\n  margin-top: 2px;\\n  margin-bottom: 0px;\\n}\\n.add-cell-line-top .add-cell-line-button {\\n  visibility: hidden;\\n}\\n.add-cell-line-button {\\n  border-width: 0px;\\n  border-style: solid;\\n  text-align: center;\\n  line-height: 16px;\\n  background-color: transparent;\\n  cursor: hand;\\n  height: var(--button-size);\\n  padding: 0px;\\n  display: flex;\\n}\\n.add-cell-line-button:focus {\\n  outline: none;\\n}\\n.add-cell-line-top:hover .add-cell-line-button {\\n  visibility: visible;\\n}\\n.add-cell-line-button .image-button-image {\\n  height: var(--button-size);\\n}\\n.add-cell-line-button .image-button-image svg {\\n  height: var(--button-size);\\n}\\n.add-cell-line-divider {\\n  margin-top: 8px;\\n  margin-left: 2px;\\n  width: calc(100vw - 40px);\\n  border-width: 0px;\\n  border-top-color: var(--override-badge-background, var(--vscode-badge-background));\\n  border-top-width: 1px;\\n  border-style: solid;\\n}\\n.add-cell-line-divider:hover {\\n  cursor: pointer;\\n}\\n.cell-wrapper-selected .add-cell-line {\\n  visibility: visible;\\n}\\n.cell-wrapper-focused .add-cell-line {\\n  visibility: visible;\\n}\\n/*\\nCell Row Container layout\\n--------------------------\\ncollapse-bar        controls-div        [cell-input, cell-output, markdown-cell-output-container]\\n(expanded c-bar)    celltoolbar-middle\\n*/\\n.cell-row-container {\\n  display: grid;\\n  grid-template-columns: auto auto 1fr;\\n  grid-template-rows: 1fr auto;\\n}\\n.collapse-bar {\\n  grid-column: 1;\\n  grid-row-start: 1;\\n  grid-row-end: 2;\\n  background-color: transparent;\\n  max-width: 8px;\\n  min-width: 8px;\\n}\\n.cell-wrapper:hover .collapse-bar {\\n  background-color: var(--override-widget-background, var(--vscode-notifications-background));\\n}\\n.collapse-bar-markdown {\\n  margin: 0px 44px 0px 0px;\\n}\\n.collapse-bar-output {\\n  margin: 0px 28px 0px 16px;\\n}\\n.collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n  grid-row-start: 1;\\n  grid-row-end: 3;\\n}\\n.cell-wrapper:hover .collapse-bar-selected {\\n  background-color: var(--vscode-peekView-border);\\n}\\n.cell-wrapper:hover .collapse-bar-focused {\\n  background: repeating-linear-gradient(-45deg, transparent, transparent 3px, var(--vscode-editorGutter-addedBackground) 3px, var(--vscode-editorGutter-addedBackground) 6px);\\n}\\n.add-divider {\\n  visibility: hidden;\\n  margin: 0px;\\n  position: absolute;\\n  bottom: 8px;\\n}\\n.cell-wrapper:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-selected:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.cell-wrapper-focused:hover .add-divider {\\n  visibility: hidden;\\n  z-index: -100;\\n  pointer-events: none;\\n}\\n.toolbar-menu-bar .image-button {\\n  margin-left: 8px;\\n}\\n\", \"\"]);\n\n// exports\n"],"sourceRoot":""}