{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/datascience-ui/history-react/interactivePanel.less","webpack:///./src/datascience-ui/interactive-common/collapseButton.tsx","webpack:///./src/datascience-ui/interactive-common/inputHistory.ts","webpack:///./src/datascience-ui/history-react/redux/actions.ts","webpack:///./src/datascience-ui/history-react/interactiveCell.tsx","webpack:///./src/datascience-ui/history-react/interactivePanel.tsx","webpack:///./src/datascience-ui/history-react/redux/reducers/creation.ts","webpack:///./src/datascience-ui/history-react/redux/reducers/effects.ts","webpack:///./src/datascience-ui/history-react/redux/reducers/execution.ts","webpack:///./src/datascience-ui/history-react/redux/reducers/index.ts","webpack:///./src/datascience-ui/history-react/index.tsx","webpack:///./src/datascience-ui/history-react/redux/store.ts","webpack:///./src/datascience-ui/history-react/interactivePanel.less?2b98"],"names":["i","chunkIds","length","deferredModules","j","deferredModule","module","chunkId","type","target","script","enumerable","get","getter","value","key","bind","Object","prototype","hasOwnProperty","call","object","property","console","error","err","jsonpArray","webpackJsonpCallback","exports","push","props","render","collapseInputPolygonClassNames","this","open","theme","collapseInputClassNames","visible","tooltip","ariaExpanded","className","title","onClick","version","baseProfile","width","height","points","fill","label","historyStack","completeUp","code","undefined","up","result","adjustCursors","completeDown","down","add","typed","last","reset","currentPos","actionCreators","refreshVariables","newExecutionCount","REFRESH_VARIABLES","payload","restartKernel","RESTART_KERNEL","interruptKernel","INTERRUPT_KERNEL","deleteAllCells","DELETE_ALL_CELLS","deleteCell","cellId","DELETE_CELL","undo","UNDO","redo","REDO","linkClick","href","LINK_CLICK","showPlot","imageHtml","SHOW_PLOT","toggleInputBlock","TOGGLE_INPUT_BLOCK","gotoCell","GOTO_CELL","copyCellCode","COPY_CELL_CODE","gatherCell","GATHER_CELL","clickCell","CLICK_CELL","doubleClickCell","DOUBLE_CLICK_CELL","editCell","changes","modelId","EDIT_CELL","submitInput","SUBMIT_INPUT","toggleVariableExplorer","TOGGLE_VARIABLE_EXPLORER","expandAll","EXPAND_ALL","collapseAll","COLLAPSE_ALL","export","EXPORT","showDataViewer","variable","columnSize","SHOW_DATA_VIEWER","editorLoaded","EDITOR_LOADED","scroll","isAtBottom","SCROLL","unfocus","UNFOCUS_CELL","codeCreated","CODE_CREATED","editorUnmounted","UNMOUNT","selectKernel","SELECT_KERNEL","selectServer","SELECT_SERVER","getVariableData","startIndex","pageSize","GET_VARIABLE_DATA","executionCount","sortColumn","sortAscending","prop","codeRef","wrapperRef","getCell","id","cellVM","cell","isCodeCell","data","cell_type","renderNormalToolbar","hasNoSource","file","EmptyFileName","baseTheme","hidden","settings","enableGather","class","image","GatherCode","GoToSourceCode","Copy","Cancel","onMouseClick","ev","stopPropagation","onMouseDoubleClick","renderControls","busy","state","init","executing","collapseVisible","inputBlockCollapseNeeded","inputBlockShow","editable","execution_count","toString","isEditOnlyCell","EditCellId","toolbar","isBusy","count","editExecutionCount","inputBlockOpen","renderInput","editorOptions","history","inputHistory","codeTheme","onCodeChange","onCodeCreated","unfocused","onUnfocused","testMode","showWatermark","ref","monacoTheme","openLink","editorMeasureClassName","keyDown","isEditCell","onEditCellKeyDown","showLineNumbers","font","focusPending","getCurrentCode","_code","_file","hasOutput","finished","getCodeCell","onKeyDown","event","e","shiftKey","ctrlKey","metaKey","altKey","preventDefault","_cellId","editCellEscape","editCellSubmit","focusedElement","document","activeElement","editorInfo","isSuggesting","nextTabStop","findTabStop","focus","uri","showingMarkdownEditor","messages","renderNormalCell","componentDidUpdate","prevProps","selected","focused","giveFocus","scrollCount","scrollAndFlash","shouldComponentUpdate","nextProps","current","scrollIntoView","behavior","block","inline","classList","setTimeout","remove","contains","shouldRender","showCellInputCode","directInput","shouldRenderResults","cellOuterClass","cellWrapperClass","themeMatplotlibPlots","role","tabIndex","onDoubleClick","expandImage","maxTextSize","getContents","source","outputs","hideOutput","contents","endPos","content","slice","isDirty","clear","direction","element","allFocusable","querySelectorAll","tabable","Array","filter","indexOf","mapStateToProps","main","variableState","variables","ConnectedInteractiveCell","mainPanelRef","contentPanelRef","renderCount","internalScrollCount","getInputExecutionCount","currentExecutionCount","getContentProps","cellVMs","submittedText","skipNextScroll","newCellVM","renderCell","scrollToBottom","scrollDiv","getVariableProps","debugging","showDataExplorer","skipDefault","closeVariableExplorer","pageIn","pageInVariableData","fontSize","size","_index","containerRef","maxOutputSize","autoFocus","activateCount","div","handleScroll","currentHeight","currentTarget","scrollHeight","scrollTop","clientHeight","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","dynamicFont","fontFamily","family","progressBar","style","rootCss","renderToolbarPanel","renderVariablePanel","onScroll","renderContentPanel","renderFooterPanel","variableExplorerTooltip","disabled","redoStack","Redo","undoStack","Undo","Interrupt","Restart","VariableExplorer","SaveAs","ExpandAll","CollapseAll","kernel","variableProps","monacoReady","contentProps","editCellVM","editPanelClass","colorizeInputBox","hasFocus","Creation","isCellSupported","alterCellVM","expanded","newText","inputBlockText","split","concat","prepareCellVM","mainState","collapseCellInputCodeByDefault","hasBeenRun","startCell","arg","prevState","updateOrAdd","queueAction","AddCell","fullText","currentText","updateCell","finishCell","DeleteAllCells","pushStack","selectedCellId","focusedCellId","index","findIndex","c","DeleteCell","RemoveCell","newVMs","_c","unmount","Effects","map","oldVM","updateSettings","newSettings","JSON","parse","newEditorOptions","newFontFamily","extraSettings","newFontSize","vscodeThemeName","knownDark","computeKnownDark","GetCssRequest","isDark","GetMonacoThemeRequest","scrollToCell","scrolled","unfocusCell","Execution","cloneDeep","cells","startDebugging","stopDebugging","matcher","stripFirstMarker","newCell","splitLines","trim","firstLine","isMarkdown","collapseInputs","useQuickEdit","SubmitNewCell","reducerMap","selectJupyterURI","exportCells","SAVE","save","gather","started","STARTCELL","FINISHCELL","UPDATECELL","ACTIVATE","activate","RESTARTKERNEL","handleRestarted","GETCSSRESPONSE","handleCss","MONACOREADY","GETMONACOTHEMERESPONSE","monacoThemeChange","GETALLCELLS","getAllCells","EXPANDALL","COLLAPSEALL","DELETEALLCELLS","STARTPROGRESS","startProgress","STOPPROGRESS","stopProgress","UPDATESETTINGS","STARTDEBUGGING","STOPDEBUGGING","SCROLLTOCELL","UPDATEKERNEL","updateStatus","LOCINIT","handleLocInit","window","inTestMode","acquireVsCodeApi","ConnectedInteractiveEditor","store","getElementById","options","transform","locals"],"mappings":"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","file":"interactiveWindow.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"interactiveWindow\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\":\"vendors~dataresource~geojson~modeldebug~nteract_transforms~nteract_transforms_vsdom\",\"modeldebug\":\"modeldebug\",\"nteract_transforms_vsdom\":\"nteract_transforms_vsdom\",\"vendors~dataresource~vega\":\"vendors~dataresource~vega\",\"vendors~dataresource\":\"vendors~dataresource\",\"vendors~geojson\":\"vendors~geojson\",\"vendors~nteract_transforms\":\"vendors~nteract_transforms\",\"vendors~vega\":\"vendors~vega\",\"vega\":\"vega\",\"vendors~plotly\":\"vendors~plotly\"}[chunkId]||chunkId) + \".bundle.js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\t(function (module) {\n \t\t  if (module.exports\n \t\t    && !module.exports.__esModule\n \t\t    && module.exports.default === undefined\n \t\t  ) {\n \t\t    if (module.exports.headers\n \t\t      && module.exports.headers.common\n \t\t      && module.exports.headers.common.Accept\n \t\t      && module.exports.adapter\n \t\t      && module.exports.transformRequest\n \t\t      && module.exports.transformResponse\n \t\t    ) {\n \t\t      return;\n \t\t    }\n \t\t    module.exports.default = module.exports;\n \t\t  }\n \t\t})(module);\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([1,\"monaco\",\"commons\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../../node_modules/css-loader/index.js!../interactive-common/common.css\"), \"\");\n\n// module\nexports.push([module.id, \"/* Import common styles and then override them below */\\n.toolbar-menu-bar-child {\\n  background: var(--override-background, var(--vscode-editor-background));\\n  z-index: 10;\\n}\\n\", \"\"]);\n\n// exports\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as React from 'react';\nimport { getLocString } from '../react-common/locReactSide';\n\ninterface ICollapseButtonProps {\n    theme: string;\n    tooltip: string;\n    visible: boolean;\n    open: boolean;\n    label?: string;\n    onClick(): void;\n}\n\nexport class CollapseButton extends React.Component<ICollapseButtonProps> {\n    constructor(props: ICollapseButtonProps) {\n        super(props);\n    }\n\n    public render() {\n        const collapseInputPolygonClassNames = `collapse-input-svg ${this.props.open ? ' collapse-input-svg-rotate' : ''} collapse-input-svg-${this.props.theme}`;\n        const collapseInputClassNames = `collapse-input remove-style ${this.props.visible ? '' : ' invisible'}`;\n        const tooltip = this.props.open ? getLocString('DataScience.collapseSingle', 'Collapse') : getLocString('DataScience.expandSingle', 'Expand');\n        const ariaExpanded = this.props.open ? 'true' : 'false';\n        // https://reactjs.org/docs/conditional-rendering.html#inline-if-with-logical--operator\n        // Comment here just because the (boolean && statement) was new to me\n        return (\n            <button className={collapseInputClassNames} title={tooltip} onClick={this.props.onClick} aria-expanded={ariaExpanded}>\n                <svg version=\"1.1\" baseProfile=\"full\" width=\"8px\" height=\"11px\">\n                    <polygon points=\"0,0 0,10 5,5\" className={collapseInputPolygonClassNames} fill=\"black\" />\n                </svg>\n                {this.props.label && <label className=\"collapseInputLabel\">{this.props.label}</label>}\n            </button>\n        );\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nexport class InputHistory {\n    private historyStack: string[] = [];\n    private up: number | undefined;\n    private down: number | undefined;\n    private last: number | undefined;\n\n    public completeUp(code: string): string {\n        // If going up, only move if anything in the history\n        if (this.historyStack.length > 0) {\n            if (this.up === undefined) {\n                this.up = 0;\n            }\n\n            const result = this.up < this.historyStack.length ? this.historyStack[this.up] : code;\n            this.adjustCursors(this.up);\n            return result;\n        }\n\n        return code;\n    }\n\n    public completeDown(code: string): string {\n        // If going down, move and then return something if we have a position\n        if (this.historyStack.length > 0 && this.down !== undefined) {\n            const result = this.historyStack[this.down];\n            this.adjustCursors(this.down);\n            return result;\n        }\n\n        return code;\n    }\n\n    public add(code: string, typed: boolean) {\n        // Compute our new history. Behavior depends upon if the user typed it in or\n        // just used the arrows\n\n        // Only skip adding a dupe if it's the same as the top item. Otherwise\n        // add it as normal.\n        this.historyStack = this.last === 0 && this.historyStack.length > 0 && this.historyStack[this.last] === code ? this.historyStack : [code, ...this.historyStack];\n\n        // Position is more complicated. If we typed something start over\n        if (typed) {\n            this.reset();\n        } else {\n            // We want our next up push to match the index of the item that was\n            // actually entered.\n            if (this.last === 0) {\n                this.up = undefined;\n                this.down = undefined;\n            } else if (this.last) {\n                this.up = this.last + 1;\n                this.down = this.last - 1;\n            }\n        }\n    }\n\n    private reset() {\n        this.up = undefined;\n        this.down = undefined;\n    }\n\n    private adjustCursors(currentPos: number) {\n        // Save last position we entered.\n        this.last = currentPos;\n\n        // For a single item, ony up works. But never modify it.\n        if (this.historyStack.length > 1) {\n            if (currentPos < this.historyStack.length) {\n                this.up = currentPos + 1;\n            } else {\n                this.up = this.historyStack.length;\n\n                // If we go off the end, don't make the down go up to the last.\n                // CMD prompt behaves this way. Down is always one off.\n                currentPos = this.historyStack.length - 1;\n            }\n            if (currentPos > 0) {\n                this.down = currentPos - 1;\n            } else {\n                this.down = undefined;\n            }\n        }\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { IRefreshVariablesRequest } from '../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { IJupyterVariable, IJupyterVariablesRequest } from '../../../client/datascience/types';\nimport {\n    CommonAction,\n    CommonActionType,\n    ICellAction,\n    ICodeAction,\n    ICodeCreatedAction,\n    IEditCellAction,\n    ILinkClickAction,\n    IScrollAction,\n    IShowDataViewerAction,\n    IShowPlotAction\n} from '../../interactive-common/redux/reducers/types';\n\n// See https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\nexport const actionCreators = {\n    refreshVariables: (newExecutionCount?: number): CommonAction<IRefreshVariablesRequest> => ({ type: CommonActionType.REFRESH_VARIABLES, payload: { newExecutionCount } }),\n    restartKernel: (): CommonAction<never | undefined> => ({ type: CommonActionType.RESTART_KERNEL }),\n    interruptKernel: (): CommonAction<never | undefined> => ({ type: CommonActionType.INTERRUPT_KERNEL }),\n    deleteAllCells: (): CommonAction<never | undefined> => ({ type: CommonActionType.DELETE_ALL_CELLS }),\n    deleteCell: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.DELETE_CELL, payload: { cellId } }),\n    undo: (): CommonAction<never | undefined> => ({ type: CommonActionType.UNDO }),\n    redo: (): CommonAction<never | undefined> => ({ type: CommonActionType.REDO }),\n    linkClick: (href: string): CommonAction<ILinkClickAction> => ({ type: CommonActionType.LINK_CLICK, payload: { href } }),\n    showPlot: (imageHtml: string): CommonAction<IShowPlotAction> => ({ type: CommonActionType.SHOW_PLOT, payload: { imageHtml } }),\n    toggleInputBlock: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.TOGGLE_INPUT_BLOCK, payload: { cellId } }),\n    gotoCell: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.GOTO_CELL, payload: { cellId } }),\n    copyCellCode: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.COPY_CELL_CODE, payload: { cellId } }),\n    gatherCell: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.GATHER_CELL, payload: { cellId } }),\n    clickCell: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.CLICK_CELL, payload: { cellId } }),\n    doubleClickCell: (cellId: string): CommonAction<ICellAction> => ({ type: CommonActionType.DOUBLE_CLICK_CELL, payload: { cellId } }),\n    editCell: (cellId: string, changes: monacoEditor.editor.IModelContentChange[], modelId: string, code: string): CommonAction<IEditCellAction> => ({\n        type: CommonActionType.EDIT_CELL,\n        payload: { cellId, changes, modelId, code }\n    }),\n    submitInput: (code: string, cellId: string): CommonAction<ICodeAction> => ({ type: CommonActionType.SUBMIT_INPUT, payload: { code, cellId } }),\n    toggleVariableExplorer: (): CommonAction<never | undefined> => ({ type: CommonActionType.TOGGLE_VARIABLE_EXPLORER }),\n    expandAll: (): CommonAction<never | undefined> => ({ type: CommonActionType.EXPAND_ALL }),\n    collapseAll: (): CommonAction<never | undefined> => ({ type: CommonActionType.COLLAPSE_ALL }),\n    export: (): CommonAction<never | undefined> => ({ type: CommonActionType.EXPORT }),\n    showDataViewer: (variable: IJupyterVariable, columnSize: number): CommonAction<IShowDataViewerAction> => ({\n        type: CommonActionType.SHOW_DATA_VIEWER,\n        payload: { variable, columnSize }\n    }),\n    editorLoaded: (): CommonAction<never | undefined> => ({ type: CommonActionType.EDITOR_LOADED }),\n    scroll: (isAtBottom: boolean): CommonAction<IScrollAction> => ({ type: CommonActionType.SCROLL, payload: { isAtBottom } }),\n    unfocus: (cellId: string | undefined): CommonAction<ICellAction> => ({ type: CommonActionType.UNFOCUS_CELL, payload: { cellId } }),\n    codeCreated: (cellId: string | undefined, modelId: string): CommonAction<ICodeCreatedAction> => ({ type: CommonActionType.CODE_CREATED, payload: { cellId, modelId } }),\n    editorUnmounted: (): CommonAction<never | undefined> => ({ type: CommonActionType.UNMOUNT }),\n    selectKernel: (): CommonAction<never | undefined> => ({ type: CommonActionType.SELECT_KERNEL }),\n    selectServer: (): CommonAction<never | undefined> => ({ type: CommonActionType.SELECT_SERVER }),\n    getVariableData: (newExecutionCount: number, startIndex: number = 0, pageSize: number = 100): CommonAction<IJupyterVariablesRequest> => ({\n        type: CommonActionType.GET_VARIABLE_DATA,\n        payload: { executionCount: newExecutionCount, sortColumn: 'name', sortAscending: true, startIndex, pageSize }\n    })\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport '../../client/common/extensions';\n\nimport { nbformat } from '@jupyterlab/coreutils';\nimport * as fastDeepEqual from 'fast-deep-equal';\nimport * as monacoEditor from 'monaco-editor/esm/vs/editor/editor.api';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { Identifiers } from '../../client/datascience/constants';\nimport { CellState, IDataScienceExtraSettings } from '../../client/datascience/types';\nimport { concatMultilineStringInput } from '../common';\nimport { CellInput } from '../interactive-common/cellInput';\nimport { CellOutput } from '../interactive-common/cellOutput';\nimport { CollapseButton } from '../interactive-common/collapseButton';\nimport { ExecutionCount } from '../interactive-common/executionCount';\nimport { InformationMessages } from '../interactive-common/informationMessages';\nimport { InputHistory } from '../interactive-common/inputHistory';\nimport { ICellViewModel, IFont } from '../interactive-common/mainState';\nimport { IKeyboardEvent } from '../react-common/event';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { actionCreators } from './redux/actions';\n\ninterface IInteractiveCellBaseProps {\n    role?: string;\n    cellVM: ICellViewModel;\n    baseTheme: string;\n    codeTheme: string;\n    testMode?: boolean;\n    autoFocus: boolean;\n    maxTextSize?: number;\n    showWatermark: boolean;\n    monacoTheme: string | undefined;\n    editorOptions?: monacoEditor.editor.IEditorOptions;\n    editExecutionCount?: string;\n    editorMeasureClassName?: string;\n    font: IFont;\n    settings: IDataScienceExtraSettings;\n    focusPending: number;\n}\n\ntype IInteractiveCellProps = IInteractiveCellBaseProps & typeof actionCreators;\n\n// tslint:disable: react-this-binding-issue\nexport class InteractiveCell extends React.Component<IInteractiveCellProps> {\n    private codeRef: React.RefObject<CellInput> = React.createRef<CellInput>();\n    private wrapperRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private inputHistory: InputHistory | undefined;\n\n    constructor(prop: IInteractiveCellProps) {\n        super(prop);\n        this.state = { showingMarkdownEditor: false };\n        if (prop.cellVM.cell.id === Identifiers.EditCellId) {\n            this.inputHistory = new InputHistory();\n        }\n    }\n\n    public render() {\n        if (this.props.cellVM.cell.data.cell_type === 'messages') {\n            return <InformationMessages messages={this.props.cellVM.cell.data.messages} />;\n        } else {\n            return this.renderNormalCell();\n        }\n    }\n\n    public componentDidUpdate(prevProps: IInteractiveCellProps) {\n        if (this.props.cellVM.selected && !prevProps.cellVM.selected && !this.props.cellVM.focused) {\n            this.giveFocus();\n        }\n        if (this.props.cellVM.scrollCount !== prevProps.cellVM.scrollCount) {\n            this.scrollAndFlash();\n        }\n    }\n\n    public shouldComponentUpdate(nextProps: IInteractiveCellProps): boolean {\n        return !fastDeepEqual(this.props, nextProps);\n    }\n\n    private scrollAndFlash() {\n        if (this.wrapperRef && this.wrapperRef.current) {\n            if (this.wrapperRef.current.scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n            this.wrapperRef.current.classList.add('flash');\n            setTimeout(() => {\n                if (this.wrapperRef.current) {\n                    this.wrapperRef.current.classList.remove('flash');\n                }\n            }, 1000);\n        }\n    }\n\n    private giveFocus() {\n        // Start out with ourselves\n        if (this.wrapperRef && this.wrapperRef.current) {\n            // Give focus to the cell if not already owning focus\n            if (!this.wrapperRef.current.contains(document.activeElement)) {\n                this.wrapperRef.current.focus();\n            }\n\n            // Scroll into view (since we have focus). However this function\n            // is not supported on enzyme\n            if (this.wrapperRef.current.scrollIntoView) {\n                this.wrapperRef.current.scrollIntoView({ behavior: 'auto', block: 'nearest', inline: 'nearest' });\n            }\n        }\n    }\n\n    private toggleInputBlock = () => {\n        const cellId: string = this.getCell().id;\n        this.props.toggleInputBlock(cellId);\n    };\n\n    private getCell = () => {\n        return this.props.cellVM.cell;\n    };\n\n    private isCodeCell = () => {\n        return this.props.cellVM.cell.data.cell_type === 'code';\n    };\n\n    private renderNormalCell() {\n        const allowsPlainInput = this.props.settings.showCellInputCode || this.props.cellVM.directInput || this.props.cellVM.editable;\n        const shouldRender = allowsPlainInput || this.shouldRenderResults();\n        const cellOuterClass = this.props.cellVM.editable ? 'cell-outer-editable' : 'cell-outer';\n        const cellWrapperClass = this.props.cellVM.editable ? 'cell-wrapper' : 'cell-wrapper cell-wrapper-noneditable';\n        const themeMatplotlibPlots = this.props.settings.themeMatplotlibPlots ? true : false;\n\n        // Only render if we are allowed to.\n        if (shouldRender) {\n            return (\n                <div\n                    className={cellWrapperClass}\n                    role={this.props.role}\n                    ref={this.wrapperRef}\n                    tabIndex={0}\n                    onKeyDown={this.onKeyDown}\n                    onClick={this.onMouseClick}\n                    onDoubleClick={this.onMouseDoubleClick}\n                >\n                    <div className={cellOuterClass}>\n                        {this.renderControls()}\n                        <div className=\"content-div\">\n                            <div className=\"cell-result-container\">\n                                {this.renderInput()}\n                                <CellOutput\n                                    cellVM={this.props.cellVM}\n                                    baseTheme={this.props.baseTheme}\n                                    expandImage={this.props.showPlot}\n                                    maxTextSize={this.props.maxTextSize}\n                                    themeMatplotlibPlots={themeMatplotlibPlots}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        // Shouldn't be rendered because not allowing empty input and not a direct input cell\n        return null;\n    }\n\n    private renderNormalToolbar = () => {\n        const cell = this.getCell();\n        const cellId = cell.id;\n        const gotoCode = () => this.props.gotoCell(cellId);\n        const deleteCode = () => this.props.deleteCell(cellId);\n        const copyCode = () => this.props.copyCellCode(cellId);\n        const gatherCode = () => this.props.gatherCell(cellId);\n        const hasNoSource = !cell || !cell.file || cell.file === Identifiers.EmptyFileName;\n\n        return (\n            <div className=\"cell-toolbar\" key={0}>\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={gatherCode}\n                    hidden={!this.props.settings.enableGather}\n                    tooltip={getLocString('DataScience.gatherCodeTooltip', 'Gather code')}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.GatherCode} />\n                </ImageButton>\n                <ImageButton baseTheme={this.props.baseTheme} onClick={gotoCode} tooltip={getLocString('DataScience.gotoCodeButtonTooltip', 'Go to code')} hidden={hasNoSource}>\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.GoToSourceCode} />\n                </ImageButton>\n                <ImageButton\n                    baseTheme={this.props.baseTheme}\n                    onClick={copyCode}\n                    tooltip={getLocString('DataScience.copyBackToSourceButtonTooltip', 'Paste code into file')}\n                    hidden={!hasNoSource}\n                >\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Copy} />\n                </ImageButton>\n                <ImageButton baseTheme={this.props.baseTheme} onClick={deleteCode} tooltip={getLocString('DataScience.deleteButtonTooltip', 'Remove Cell')}>\n                    <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Cancel} />\n                </ImageButton>\n            </div>\n        );\n    };\n\n    private onMouseClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        // When we receive a click, propagate upwards. Might change our state\n        if (this.props.clickCell) {\n            ev.stopPropagation();\n            this.props.clickCell(this.props.cellVM.cell.id);\n        }\n    };\n\n    private onMouseDoubleClick = (ev: React.MouseEvent<HTMLDivElement>) => {\n        // When we receive double click, propagate upwards. Might change our state\n        if (this.props.doubleClickCell) {\n            ev.stopPropagation();\n            this.props.doubleClickCell(this.props.cellVM.cell.id);\n        }\n    };\n\n    private renderControls = () => {\n        const busy = this.props.cellVM.cell.state === CellState.init || this.props.cellVM.cell.state === CellState.executing;\n        const collapseVisible = this.props.cellVM.inputBlockCollapseNeeded && this.props.cellVM.inputBlockShow && !this.props.cellVM.editable && this.isCodeCell();\n        const executionCount =\n            this.props.cellVM && this.props.cellVM.cell && this.props.cellVM.cell.data && this.props.cellVM.cell.data.execution_count\n                ? this.props.cellVM.cell.data.execution_count.toString()\n                : '-';\n        const isEditOnlyCell = this.props.cellVM.cell.id === Identifiers.EditCellId;\n        const toolbar = isEditOnlyCell ? null : this.renderNormalToolbar();\n\n        return (\n            <div className=\"controls-div\">\n                <ExecutionCount\n                    isBusy={busy}\n                    count={isEditOnlyCell && this.props.editExecutionCount ? this.props.editExecutionCount : executionCount}\n                    visible={this.isCodeCell()}\n                />\n                <CollapseButton\n                    theme={this.props.baseTheme}\n                    visible={collapseVisible}\n                    open={this.props.cellVM.inputBlockOpen}\n                    onClick={this.toggleInputBlock}\n                    tooltip={getLocString('DataScience.collapseInputTooltip', 'Collapse input block')}\n                />\n                {toolbar}\n            </div>\n        );\n    };\n\n    private renderInput = () => {\n        if (this.isCodeCell()) {\n            return (\n                <CellInput\n                    cellVM={this.props.cellVM}\n                    editorOptions={this.props.editorOptions}\n                    history={this.inputHistory}\n                    codeTheme={this.props.codeTheme}\n                    onCodeChange={this.onCodeChange}\n                    onCodeCreated={this.onCodeCreated}\n                    unfocused={this.onUnfocused}\n                    testMode={this.props.testMode ? true : false}\n                    showWatermark={this.props.showWatermark}\n                    ref={this.codeRef}\n                    monacoTheme={this.props.monacoTheme}\n                    openLink={this.openLink}\n                    editorMeasureClassName={this.props.editorMeasureClassName}\n                    keyDown={this.isEditCell() ? this.onEditCellKeyDown : undefined}\n                    showLineNumbers={this.props.cellVM.showLineNumbers}\n                    font={this.props.font}\n                    focusPending={this.props.focusPending}\n                />\n            );\n        }\n        return null;\n    };\n\n    private isEditCell(): boolean {\n        return this.getCell().id === Identifiers.EditCellId;\n    }\n\n    private onUnfocused = () => {\n        this.props.unfocus(this.getCell().id);\n    };\n\n    private getCurrentCode(): string {\n        // Get current monaco code, if not available fallback to cell data source\n        const contents = this.codeRef.current ? this.codeRef.current.getContents() : undefined;\n        return contents || concatMultilineStringInput(this.props.cellVM.cell.data.source);\n    }\n\n    private onCodeChange = (changes: monacoEditor.editor.IModelContentChange[], cellId: string, modelId: string) => {\n        this.props.editCell(cellId, changes, modelId, this.getCurrentCode());\n    };\n\n    private onCodeCreated = (_code: string, _file: string, cellId: string, modelId: string) => {\n        this.props.codeCreated(cellId, modelId);\n    };\n\n    private hasOutput = () => {\n        return this.getCell().state === CellState.finished || this.getCell().state === CellState.error || this.getCell().state === CellState.executing;\n    };\n\n    private getCodeCell = () => {\n        return this.props.cellVM.cell.data as nbformat.ICodeCell;\n    };\n\n    private shouldRenderResults(): boolean {\n        return this.isCodeCell() && this.hasOutput() && this.getCodeCell().outputs && this.getCodeCell().outputs.length > 0 && !this.props.cellVM.hideOutput;\n    }\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        // Handle keydown events for the entire cell\n        if (this.getCell().id === Identifiers.EditCellId) {\n            const e: IKeyboardEvent = {\n                code: event.key,\n                shiftKey: event.shiftKey,\n                ctrlKey: event.ctrlKey,\n                metaKey: event.metaKey,\n                altKey: event.altKey,\n                target: event.target as HTMLDivElement,\n                stopPropagation: () => event.stopPropagation(),\n                preventDefault: () => event.preventDefault()\n            };\n            this.onEditCellKeyDown(Identifiers.EditCellId, e);\n        }\n    };\n\n    private onEditCellKeyDown = (_cellId: string, e: IKeyboardEvent) => {\n        if (e.code === 'Escape') {\n            this.editCellEscape(e);\n        } else if (e.code === 'Enter' && e.shiftKey) {\n            this.editCellSubmit(e);\n        }\n    };\n\n    private editCellSubmit(e: IKeyboardEvent) {\n        if (e.editorInfo && e.editorInfo.contents) {\n            // Prevent shift+enter from turning into a enter\n            e.stopPropagation();\n            e.preventDefault();\n\n            // Remove empty lines off the end\n            let endPos = e.editorInfo.contents.length - 1;\n            while (endPos >= 0 && e.editorInfo.contents[endPos] === '\\n') {\n                endPos -= 1;\n            }\n            const content = e.editorInfo.contents.slice(0, endPos + 1);\n\n            // Send to the input history too if necessary\n            if (this.inputHistory) {\n                this.inputHistory.add(content, e.editorInfo.isDirty);\n            }\n\n            // Clear our editor\n            e.editorInfo.clear();\n\n            // Send to jupyter\n            this.props.submitInput(content, this.props.cellVM.cell.id);\n        }\n    }\n\n    private findTabStop(direction: number, element: Element): HTMLElement | undefined {\n        if (element) {\n            const allFocusable = document.querySelectorAll('input, button, select, textarea, a[href]');\n            if (allFocusable) {\n                const tabable = Array.prototype.filter.call(allFocusable, (i: HTMLElement) => i.tabIndex >= 0);\n                const self = tabable.indexOf(element);\n                return direction >= 0 ? tabable[self + 1] || tabable[0] : tabable[self - 1] || tabable[0];\n            }\n        }\n    }\n\n    private editCellEscape = (e: IKeyboardEvent) => {\n        const focusedElement = document.activeElement;\n        if (focusedElement !== null && e.editorInfo && !e.editorInfo.isSuggesting) {\n            const nextTabStop = this.findTabStop(1, focusedElement);\n            if (nextTabStop) {\n                nextTabStop.focus();\n            }\n        }\n    };\n\n    private openLink = (uri: monacoEditor.Uri) => {\n        this.props.linkClick(uri.toString());\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedInteractiveCell() {\n    return connect(null, actionCreators)(InteractiveCell);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Identifiers } from '../../client/datascience/constants';\nimport { ContentPanel, IContentPanelProps } from '../interactive-common/contentPanel';\nimport { handleLinkClick } from '../interactive-common/handlers';\nimport { KernelSelection } from '../interactive-common/kernelSelection';\nimport { ICellViewModel } from '../interactive-common/mainState';\nimport { IMainWithVariables, IStore } from '../interactive-common/redux/store';\nimport { IVariablePanelProps, VariablePanel } from '../interactive-common/variablePanel';\nimport { ErrorBoundary } from '../react-common/errorBoundary';\nimport { Image, ImageName } from '../react-common/image';\nimport { ImageButton } from '../react-common/imageButton';\nimport { getLocString } from '../react-common/locReactSide';\nimport { Progress } from '../react-common/progress';\nimport { getConnectedInteractiveCell } from './interactiveCell';\nimport './interactivePanel.less';\nimport { actionCreators } from './redux/actions';\n\ntype IInteractivePanelProps = IMainWithVariables & typeof actionCreators;\n\nfunction mapStateToProps(state: IStore): IMainWithVariables {\n    return { ...state.main, variableState: state.variables };\n}\n\nconst ConnectedInteractiveCell = getConnectedInteractiveCell();\n\nexport class InteractivePanel extends React.Component<IInteractivePanelProps> {\n    private mainPanelRef: React.RefObject<HTMLDivElement> = React.createRef<HTMLDivElement>();\n    private contentPanelRef: React.RefObject<ContentPanel> = React.createRef<ContentPanel>();\n    private renderCount: number = 0;\n    private internalScrollCount: number = 0;\n\n    constructor(props: IInteractivePanelProps) {\n        super(props);\n    }\n\n    public componentDidMount() {\n        document.addEventListener('click', this.linkClick, true);\n        this.props.editorLoaded();\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('click', this.linkClick);\n        this.props.editorUnmounted();\n    }\n\n    public render() {\n        const dynamicFont: React.CSSProperties = {\n            fontSize: this.props.font.size,\n            fontFamily: this.props.font.family\n        };\n\n        const progressBar = this.props.busy && !this.props.testMode ? <Progress /> : undefined;\n\n        // If in test mode, update our count. Use this to determine how many renders a normal update takes.\n        if (this.props.testMode) {\n            this.renderCount = this.renderCount + 1;\n        }\n\n        return (\n            <div id=\"main-panel\" ref={this.mainPanelRef} role=\"Main\" style={dynamicFont}>\n                <div className=\"styleSetter\">\n                    <style>{this.props.rootCss}</style>\n                </div>\n                <header id=\"main-panel-toolbar\">\n                    {this.renderToolbarPanel()}\n                    {progressBar}\n                </header>\n                <section id=\"main-panel-variable\" aria-label={getLocString('DataScience.collapseVariableExplorerLabel', 'Variables')}>\n                    {this.renderVariablePanel(this.props.baseTheme)}\n                </section>\n                <main id=\"main-panel-content\" onScroll={this.handleScroll}>\n                    {this.renderContentPanel(this.props.baseTheme)}\n                </main>\n                <section id=\"main-panel-footer\" aria-label={getLocString('DataScience.editSection', 'Input new cells here')}>\n                    {this.renderFooterPanel(this.props.baseTheme)}\n                </section>\n            </div>\n        );\n    }\n\n    private renderToolbarPanel() {\n        const variableExplorerTooltip = this.props.variableState.visible\n            ? getLocString('DataScience.collapseVariableExplorerTooltip', 'Hide variables active in jupyter kernel')\n            : getLocString('DataScience.expandVariableExplorerTooltip', 'Show variables active in jupyter kernel');\n\n        return (\n            <div id=\"toolbar-panel\">\n                <div className=\"toolbar-menu-bar\">\n                    <div className=\"toolbar-menu-bar-child\">\n                        <ImageButton baseTheme={this.props.baseTheme} onClick={this.props.deleteAllCells} tooltip={getLocString('DataScience.clearAll', 'Remove all cells')}>\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Cancel} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.redo}\n                            disabled={this.props.redoStack.length === 0}\n                            tooltip={getLocString('DataScience.redo', 'Redo')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Redo} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.undo}\n                            disabled={this.props.undoStack.length === 0}\n                            tooltip={getLocString('DataScience.undo', 'Undo')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Undo} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.interruptKernel}\n                            disabled={this.props.busy}\n                            tooltip={getLocString('DataScience.interruptKernel', 'Interrupt IPython kernel')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Interrupt} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.restartKernel}\n                            disabled={this.props.busy}\n                            tooltip={getLocString('DataScience.restartServer', 'Restart IPython kernel')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.Restart} />\n                        </ImageButton>\n                        <ImageButton baseTheme={this.props.baseTheme} onClick={this.props.toggleVariableExplorer} tooltip={variableExplorerTooltip}>\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.VariableExplorer} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.export}\n                            disabled={this.props.cellVMs.length === 0 || this.props.busy}\n                            tooltip={getLocString('DataScience.export', 'Export as Jupyter notebook')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.SaveAs} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.expandAll}\n                            disabled={this.props.cellVMs.length === 0}\n                            tooltip={getLocString('DataScience.expandAll', 'Expand all cell inputs')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.ExpandAll} />\n                        </ImageButton>\n                        <ImageButton\n                            baseTheme={this.props.baseTheme}\n                            onClick={this.props.collapseAll}\n                            disabled={this.props.cellVMs.length === 0}\n                            tooltip={getLocString('DataScience.collapseAll', 'Collapse all cell inputs')}\n                        >\n                            <Image baseTheme={this.props.baseTheme} class=\"image-button-image\" image={ImageName.CollapseAll} />\n                        </ImageButton>\n                    </div>\n                    <KernelSelection\n                        baseTheme={this.props.baseTheme}\n                        font={this.props.font}\n                        kernel={this.props.kernel}\n                        selectServer={this.props.selectServer}\n                        selectKernel={this.props.selectKernel}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    private renderVariablePanel(baseTheme: string) {\n        if (this.props.variableState.visible) {\n            const variableProps = this.getVariableProps(baseTheme);\n            return <VariablePanel {...variableProps} />;\n        }\n\n        return null;\n    }\n\n    private renderContentPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (!this.props.monacoReady && !this.props.testMode) {\n            return null;\n        }\n\n        // Otherwise render our cells.\n        const contentProps = this.getContentProps(baseTheme);\n        return <ContentPanel {...contentProps} ref={this.contentPanelRef} />;\n    }\n\n    private renderFooterPanel(baseTheme: string) {\n        // Skip if the tokenizer isn't finished yet. It needs\n        // to finish loading so our code editors work.\n        if (!this.props.monacoReady || !this.props.editCellVM || !this.props.settings || !this.props.editorOptions) {\n            return null;\n        }\n\n        const maxOutputSize = this.props.settings.maxOutputSize;\n        const maxTextSize = maxOutputSize && maxOutputSize < 10000 && maxOutputSize > 0 ? maxOutputSize : undefined;\n        const executionCount = this.getInputExecutionCount();\n        const editPanelClass = this.props.settings.colorizeInputBox ? 'edit-panel-colorized' : 'edit-panel';\n\n        return (\n            <div className={editPanelClass}>\n                <ErrorBoundary>\n                    <ConnectedInteractiveCell\n                        role=\"form\"\n                        editorOptions={this.props.editorOptions}\n                        maxTextSize={maxTextSize}\n                        autoFocus={document.hasFocus()}\n                        testMode={this.props.testMode}\n                        cellVM={this.props.editCellVM}\n                        baseTheme={baseTheme}\n                        codeTheme={this.props.codeTheme}\n                        showWatermark={true}\n                        editExecutionCount={executionCount.toString()}\n                        monacoTheme={this.props.monacoTheme}\n                        font={this.props.font}\n                        settings={this.props.settings}\n                        focusPending={this.props.activateCount}\n                    />\n                </ErrorBoundary>\n            </div>\n        );\n    }\n\n    private getInputExecutionCount = (): number => {\n        return this.props.currentExecutionCount + 1;\n    };\n\n    private getContentProps = (baseTheme: string): IContentPanelProps => {\n        return {\n            baseTheme: baseTheme,\n            cellVMs: this.props.cellVMs,\n            testMode: this.props.testMode,\n            codeTheme: this.props.codeTheme,\n            submittedText: this.props.submittedText,\n            skipNextScroll: this.props.skipNextScroll ? true : false,\n            editable: false,\n            newCellVM: undefined,\n            renderCell: this.renderCell,\n            scrollToBottom: this.scrollDiv\n        };\n    };\n    private getVariableProps = (baseTheme: string): IVariablePanelProps => {\n        return {\n            variables: this.props.variableState.variables,\n            debugging: this.props.debugging,\n            busy: this.props.busy,\n            showDataExplorer: this.props.showDataViewer,\n            skipDefault: this.props.skipDefault,\n            testMode: this.props.testMode,\n            closeVariableExplorer: this.props.toggleVariableExplorer,\n            baseTheme: baseTheme,\n            pageIn: this.pageInVariableData,\n            fontSize: this.props.font.size,\n            executionCount: this.props.currentExecutionCount\n        };\n    };\n\n    private pageInVariableData = (startIndex: number, pageSize: number) => {\n        this.props.getVariableData(this.props.currentExecutionCount, startIndex, pageSize);\n    };\n\n    private renderCell = (cellVM: ICellViewModel, _index: number, containerRef?: React.RefObject<HTMLDivElement>): JSX.Element | null => {\n        if (this.props.settings && this.props.editorOptions) {\n            return (\n                <div key={cellVM.cell.id} id={cellVM.cell.id} ref={containerRef}>\n                    <ErrorBoundary>\n                        <ConnectedInteractiveCell\n                            role=\"listitem\"\n                            editorOptions={this.props.editorOptions}\n                            maxTextSize={this.props.settings.maxOutputSize}\n                            autoFocus={false}\n                            testMode={this.props.testMode}\n                            cellVM={cellVM}\n                            baseTheme={this.props.baseTheme}\n                            codeTheme={this.props.codeTheme}\n                            showWatermark={cellVM.cell.id === Identifiers.EditCellId}\n                            editExecutionCount={this.getInputExecutionCount().toString()}\n                            monacoTheme={this.props.monacoTheme}\n                            font={this.props.font}\n                            settings={this.props.settings}\n                            focusPending={this.props.activateCount}\n                        />\n                    </ErrorBoundary>\n                </div>\n            );\n        } else {\n            return null;\n        }\n    };\n\n    // This handles the scrolling. Its called from the props of contentPanel.\n    // We only scroll when the state indicates we are at the bottom of the interactive window,\n    // otherwise it sometimes scrolls when the user wasn't at the bottom.\n    private scrollDiv = (div: HTMLDivElement) => {\n        if (this.props.isAtBottom) {\n            this.internalScrollCount += 1;\n            // Force auto here as smooth scrolling can be canceled by updates to the window\n            // from elsewhere (and keeping track of these would make this hard to maintain)\n            if (div.scrollIntoView) {\n                div.scrollIntoView({ behavior: 'auto', block: 'start', inline: 'nearest' });\n            }\n        }\n    };\n\n    private handleScroll = (e: React.UIEvent<HTMLDivElement>) => {\n        if (this.internalScrollCount > 0) {\n            this.internalScrollCount -= 1;\n        } else {\n            const currentHeight = e.currentTarget.scrollHeight - e.currentTarget.scrollTop;\n            const isAtBottom = currentHeight < e.currentTarget.clientHeight + 2 && currentHeight > e.currentTarget.clientHeight - 2;\n            this.props.scroll(isAtBottom);\n        }\n    };\n\n    private linkClick = (ev: MouseEvent) => {\n        handleLinkClick(ev, this.props.linkClick);\n    };\n}\n\n// Main export, return a redux connected editor\nexport function getConnectedInteractiveEditor() {\n    return connect(mapStateToProps, actionCreators)(InteractivePanel);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { Identifiers } from '../../../../client/datascience/constants';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { ICell, IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { createCellVM, extractInputText, ICellViewModel, IMainState } from '../../../interactive-common/mainState';\nimport { createPostableAction } from '../../../interactive-common/redux/postOffice';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction } from '../../../interactive-common/redux/reducers/types';\nimport { InteractiveReducerArg } from '../mapping';\n\nexport namespace Creation {\n    function isCellSupported(state: IMainState, cell: ICell): boolean {\n        // Skip message cells in test mode\n        if (state.testMode) {\n            return cell.data.cell_type !== 'messages';\n        }\n        return true;\n    }\n\n    export function alterCellVM(cellVM: ICellViewModel, settings?: IDataScienceExtraSettings, visible?: boolean, expanded?: boolean): ICellViewModel {\n        if (cellVM.cell.data.cell_type === 'code') {\n            // If we are already in the correct state, return back our initial cell vm\n            if (cellVM.inputBlockShow === visible && cellVM.inputBlockOpen === expanded) {\n                return cellVM;\n            }\n\n            const newCellVM = { ...cellVM };\n            if (cellVM.inputBlockShow !== visible) {\n                if (visible) {\n                    // Show the cell, the rest of the function will add on correct collapse state\n                    newCellVM.inputBlockShow = true;\n                } else {\n                    // Hide this cell\n                    newCellVM.inputBlockShow = false;\n                }\n            }\n\n            // No elseif as we want newly visible cells to pick up the correct expand / collapse state\n            if (cellVM.inputBlockOpen !== expanded && cellVM.inputBlockCollapseNeeded && cellVM.inputBlockShow) {\n                if (expanded) {\n                    // Expand the cell\n                    const newText = extractInputText(cellVM, settings);\n\n                    newCellVM.inputBlockOpen = true;\n                    newCellVM.inputBlockText = newText;\n                } else {\n                    // Collapse the cell\n                    let newText = extractInputText(cellVM, settings);\n                    if (newText.length > 0) {\n                        newText = newText.split('\\n', 1)[0];\n                        newText = newText.slice(0, 255); // Slice to limit length, slicing past length is fine\n                        newText = newText.concat('...');\n                    }\n\n                    newCellVM.inputBlockOpen = false;\n                    newCellVM.inputBlockText = newText;\n                }\n            }\n\n            return newCellVM;\n        }\n\n        return cellVM;\n    }\n\n    export function prepareCellVM(cell: ICell, mainState: IMainState): ICellViewModel {\n        let cellVM: ICellViewModel = createCellVM(cell, mainState.settings, false, mainState.debugging);\n\n        const visible = mainState.settings ? mainState.settings.showCellInputCode : false;\n        const expanded = !mainState.settings?.collapseCellInputCodeByDefault;\n\n        // Set initial cell visibility and collapse\n        cellVM = alterCellVM(cellVM, mainState.settings, visible, expanded);\n        cellVM.hasBeenRun = true;\n\n        return cellVM;\n    }\n\n    export function startCell(arg: InteractiveReducerArg<ICell>): IMainState {\n        if (isCellSupported(arg.prevState, arg.payload)) {\n            const result = Helpers.updateOrAdd(arg, prepareCellVM);\n            if (result.cellVMs.length > arg.prevState.cellVMs.length && arg.payload.id !== Identifiers.EditCellId) {\n                const cellVM = result.cellVMs[result.cellVMs.length - 1];\n\n                // We're adding a new cell here. Tell the intellisense engine we have a new cell\n                arg.queueAction(\n                    createPostableAction(InteractiveWindowMessages.AddCell, {\n                        fullText: extractInputText(cellVM, result.settings),\n                        currentText: cellVM.inputBlockText,\n                        cell: cellVM.cell\n                    })\n                );\n            }\n\n            return result;\n        }\n        return arg.prevState;\n    }\n\n    export function updateCell(arg: InteractiveReducerArg<ICell>): IMainState {\n        if (isCellSupported(arg.prevState, arg.payload)) {\n            return Helpers.updateOrAdd(arg, prepareCellVM);\n        }\n        return arg.prevState;\n    }\n\n    export function finishCell(arg: InteractiveReducerArg<ICell>): IMainState {\n        if (isCellSupported(arg.prevState, arg.payload)) {\n            return Helpers.updateOrAdd(arg, prepareCellVM);\n        }\n        return arg.prevState;\n    }\n\n    export function deleteAllCells(arg: InteractiveReducerArg): IMainState {\n        // Send messages to other side to indicate the deletes\n        arg.queueAction(createPostableAction(InteractiveWindowMessages.DeleteAllCells));\n\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n            selectedCellId: undefined,\n            focusedCellId: undefined\n        };\n    }\n\n    export function deleteCell(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n        if (index >= 0 && arg.payload.cellId) {\n            // Send messages to other side to indicate the delete\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.DeleteCell));\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.RemoveCell, { id: arg.payload.cellId }));\n\n            const newVMs = arg.prevState.cellVMs.filter((_c, i) => i !== index);\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs)\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function unmount(arg: InteractiveReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            cellVMs: [],\n            undoStack: [],\n            redoStack: [],\n            editCellVM: undefined\n        };\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { Identifiers } from '../../../../client/datascience/constants';\nimport { IScrollToCell } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CssMessages } from '../../../../client/datascience/messages';\nimport { IDataScienceExtraSettings } from '../../../../client/datascience/types';\nimport { IMainState } from '../../../interactive-common/mainState';\nimport { createPostableAction } from '../../../interactive-common/redux/postOffice';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICellAction, IScrollAction } from '../../../interactive-common/redux/reducers/types';\nimport { computeEditorOptions } from '../../../react-common/settingsReactSide';\nimport { InteractiveReducerArg } from '../mapping';\nimport { Creation } from './creation';\n\nexport namespace Effects {\n    export function expandAll(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.settings?.showCellInputCode) {\n            const newVMs = arg.prevState.cellVMs.map(c => Creation.alterCellVM({ ...c }, arg.prevState.settings, true, true));\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function collapseAll(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.settings?.showCellInputCode) {\n            const newVMs = arg.prevState.cellVMs.map(c => Creation.alterCellVM({ ...c }, arg.prevState.settings, true, false));\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function toggleInputBlock(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        if (arg.payload.cellId) {\n            const newVMs = [...arg.prevState.cellVMs];\n            const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.cellId);\n            const oldVM = arg.prevState.cellVMs[index];\n            newVMs[index] = Creation.alterCellVM({ ...oldVM }, arg.prevState.settings, true, !oldVM.inputBlockOpen);\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs\n            };\n        }\n        return arg.prevState;\n    }\n\n    export function updateSettings(arg: InteractiveReducerArg<string>): IMainState {\n        // String arg should be the IDataScienceExtraSettings\n        const newSettingsJSON = JSON.parse(arg.payload);\n        const newSettings = <IDataScienceExtraSettings>newSettingsJSON;\n        const newEditorOptions = computeEditorOptions(newSettings);\n        const newFontFamily = newSettings.extraSettings ? newSettings.extraSettings.fontFamily : arg.prevState.font.family;\n        const newFontSize = newSettings.extraSettings ? newSettings.extraSettings.fontSize : arg.prevState.font.size;\n\n        // Ask for new theme data if necessary\n        if (newSettings && newSettings.extraSettings && newSettings.extraSettings.theme !== arg.prevState.vscodeThemeName) {\n            const knownDark = Helpers.computeKnownDark(newSettings);\n            // User changed the current theme. Rerender\n            arg.queueAction(createPostableAction(CssMessages.GetCssRequest, { isDark: knownDark }));\n            arg.queueAction(createPostableAction(CssMessages.GetMonacoThemeRequest, { isDark: knownDark }));\n        }\n\n        // Update our input cell state if the user changed this setting\n        let newVMs = arg.prevState.cellVMs;\n        if (newSettings.showCellInputCode !== arg.prevState.settings?.showCellInputCode) {\n            newVMs = arg.prevState.cellVMs.map(c => Creation.alterCellVM(c, newSettings, newSettings.showCellInputCode, !newSettings.collapseCellInputCodeByDefault));\n        }\n\n        return {\n            ...arg.prevState,\n            cellVMs: newVMs,\n            settings: newSettings,\n            editorOptions: newEditorOptions,\n            font: {\n                size: newFontSize,\n                family: newFontFamily\n            }\n        };\n    }\n\n    export function scrollToCell(arg: InteractiveReducerArg<IScrollToCell>): IMainState {\n        // Up the scroll count on the necessary cell\n        const index = arg.prevState.cellVMs.findIndex(c => c.cell.id === arg.payload.id);\n        if (index >= 0) {\n            const newVMs = [...arg.prevState.cellVMs];\n\n            // Scroll one cell and unscroll another.\n            newVMs[index] = { ...newVMs[index], scrollCount: newVMs[index].scrollCount + 1 };\n            return {\n                ...arg.prevState,\n                cellVMs: newVMs,\n                isAtBottom: false\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function scrolled(arg: InteractiveReducerArg<IScrollAction>): IMainState {\n        return {\n            ...arg.prevState,\n            isAtBottom: arg.payload.isAtBottom\n        };\n    }\n\n    export function clickCell(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        if (arg.payload.cellId === Identifiers.EditCellId && arg.prevState.editCellVM && !arg.prevState.editCellVM.focused) {\n            return {\n                ...arg.prevState,\n                editCellVM: {\n                    ...arg.prevState.editCellVM,\n                    focused: true\n                }\n            };\n        } else if (arg.prevState.editCellVM) {\n            return {\n                ...arg.prevState,\n                editCellVM: {\n                    ...arg.prevState.editCellVM,\n                    focused: false\n                }\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function unfocusCell(arg: InteractiveReducerArg<ICellAction>): IMainState {\n        if (arg.payload.cellId === Identifiers.EditCellId && arg.prevState.editCellVM && arg.prevState.editCellVM.focused) {\n            return {\n                ...arg.prevState,\n                editCellVM: {\n                    ...arg.prevState.editCellVM,\n                    focused: false\n                }\n            };\n        }\n\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n// tslint:disable-next-line: no-require-imports no-var-requires\nconst cloneDeep = require('lodash/cloneDeep');\nimport * as uuid from 'uuid/v4';\n\nimport { CellMatcher } from '../../../../client/datascience/cellMatcher';\nimport { InteractiveWindowMessages } from '../../../../client/datascience/interactive-common/interactiveWindowTypes';\nimport { CellState } from '../../../../client/datascience/types';\nimport { generateMarkdownFromCodeLines } from '../../../common';\nimport { createCellFrom } from '../../../common/cellFactory';\nimport { createCellVM, IMainState } from '../../../interactive-common/mainState';\nimport { createPostableAction } from '../../../interactive-common/redux/postOffice';\nimport { Helpers } from '../../../interactive-common/redux/reducers/helpers';\nimport { ICodeAction } from '../../../interactive-common/redux/reducers/types';\nimport { InteractiveReducerArg } from '../mapping';\nimport { Creation } from './creation';\n\nexport namespace Execution {\n    export function undo(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.undoStack.length > 0) {\n            // Pop one off of our undo stack and update our redo\n            const cells = arg.prevState.undoStack[arg.prevState.undoStack.length - 1];\n            const undoStack = arg.prevState.undoStack.slice(0, arg.prevState.undoStack.length - 1);\n            const redoStack = Helpers.pushStack(arg.prevState.redoStack, arg.prevState.cellVMs);\n            const selected = cells.findIndex(c => c.selected);\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.Undo));\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true,\n                selectedCellId: selected >= 0 ? cells[selected].cell.id : undefined,\n                focusedCellId: selected >= 0 && cells[selected].focused ? cells[selected].cell.id : undefined\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function redo(arg: InteractiveReducerArg): IMainState {\n        if (arg.prevState.redoStack.length > 0) {\n            // Pop one off of our redo stack and update our undo\n            const cells = arg.prevState.redoStack[arg.prevState.redoStack.length - 1];\n            const redoStack = arg.prevState.redoStack.slice(0, arg.prevState.redoStack.length - 1);\n            const undoStack = Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs);\n            const selected = cells.findIndex(c => c.selected);\n            arg.queueAction(createPostableAction(InteractiveWindowMessages.Redo));\n            return {\n                ...arg.prevState,\n                cellVMs: cells,\n                undoStack: undoStack,\n                redoStack: redoStack,\n                skipNextScroll: true,\n                selectedCellId: selected >= 0 ? cells[selected].cell.id : undefined,\n                focusedCellId: selected >= 0 && cells[selected].focused ? cells[selected].cell.id : undefined\n            };\n        }\n\n        return arg.prevState;\n    }\n\n    export function startDebugging(arg: InteractiveReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            debugging: true\n        };\n    }\n\n    export function stopDebugging(arg: InteractiveReducerArg): IMainState {\n        return {\n            ...arg.prevState,\n            debugging: false\n        };\n    }\n\n    export function submitInput(arg: InteractiveReducerArg<ICodeAction>): IMainState {\n        // noop if the submitted code is just a cell marker\n        const matcher = new CellMatcher(arg.prevState.settings);\n        if (matcher.stripFirstMarker(arg.payload.code).length > 0 && arg.prevState.editCellVM) {\n            // This should be from the edit cell VM. Copy it and change the cell id\n            let newCell = cloneDeep(arg.prevState.editCellVM);\n\n            // Change this editable cell to not editable.\n            newCell.cell.state = CellState.executing;\n            newCell.cell.data.source = arg.payload.code;\n\n            // Change type to markdown if necessary\n            const split = arg.payload.code.splitLines({ trim: false });\n            const firstLine = split[0];\n            if (matcher.isMarkdown(firstLine)) {\n                newCell.cell.data = createCellFrom(newCell.cell.data, 'markdown');\n                newCell.cell.data.source = generateMarkdownFromCodeLines(split);\n                newCell.cell.state = CellState.finished;\n            } else if (newCell.cell.data.cell_type === 'markdown') {\n                newCell.cell.state = CellState.finished;\n            }\n\n            // Update input controls (always show expanded since we just edited it.)\n            newCell = createCellVM(newCell.cell, arg.prevState.settings, false, false);\n            const collapseInputs = arg.prevState.settings ? arg.prevState.settings.collapseCellInputCodeByDefault : false;\n            newCell = Creation.alterCellVM(newCell, arg.prevState.settings, true, !collapseInputs);\n            newCell.useQuickEdit = false;\n\n            // Generate a new id\n            newCell.cell.id = uuid();\n\n            // Indicate this is direct input so that we don't hide it if the user has\n            // hide all inputs turned on.\n            newCell.directInput = true;\n\n            // Send a message to execute this code if necessary.\n            if (newCell.cell.state !== CellState.finished) {\n                arg.queueAction(createPostableAction(InteractiveWindowMessages.SubmitNewCell, { code: arg.payload.code, id: newCell.cell.id }));\n            }\n\n            // Stick in a new cell at the bottom that's editable and update our state\n            // so that the last cell becomes busy\n            return {\n                ...arg.prevState,\n                cellVMs: [...arg.prevState.cellVMs, newCell],\n                undoStack: Helpers.pushStack(arg.prevState.undoStack, arg.prevState.cellVMs),\n                skipNextScroll: false,\n                submittedText: true\n            };\n        }\n        return arg.prevState;\n    }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\nimport { IncomingMessageActions } from '../../../interactive-common/redux/postOffice';\nimport { CommonEffects } from '../../../interactive-common/redux/reducers/commonEffects';\nimport { Kernel } from '../../../interactive-common/redux/reducers/kernel';\nimport { Transfer } from '../../../interactive-common/redux/reducers/transfer';\nimport { CommonActionType } from '../../../interactive-common/redux/reducers/types';\nimport { IInteractiveActionMapping } from '../mapping';\nimport { Creation } from './creation';\nimport { Effects } from './effects';\nimport { Execution } from './execution';\n\n// The list of reducers. 1 per message/action.\nexport const reducerMap: IInteractiveActionMapping = {\n    // State updates\n    [CommonActionType.RESTART_KERNEL]: Kernel.restartKernel,\n    [CommonActionType.INTERRUPT_KERNEL]: Kernel.interruptKernel,\n    [CommonActionType.SELECT_KERNEL]: Kernel.selectKernel,\n    [CommonActionType.SELECT_SERVER]: Kernel.selectJupyterURI,\n    [CommonActionType.EXPORT]: Transfer.exportCells,\n    [CommonActionType.SAVE]: Transfer.save,\n    [CommonActionType.SHOW_DATA_VIEWER]: Transfer.showDataViewer,\n    [CommonActionType.DELETE_CELL]: Creation.deleteCell,\n    [CommonActionType.UNDO]: Execution.undo,\n    [CommonActionType.REDO]: Execution.redo,\n    [CommonActionType.SHOW_PLOT]: Transfer.showPlot,\n    [CommonActionType.LINK_CLICK]: Transfer.linkClick,\n    [CommonActionType.GOTO_CELL]: Transfer.gotoCell,\n    [CommonActionType.TOGGLE_INPUT_BLOCK]: Effects.toggleInputBlock,\n    [CommonActionType.COPY_CELL_CODE]: Transfer.copyCellCode,\n    [CommonActionType.GATHER_CELL]: Transfer.gather,\n    [CommonActionType.EDIT_CELL]: Transfer.editCell,\n    [CommonActionType.SUBMIT_INPUT]: Execution.submitInput,\n    [CommonActionType.DELETE_ALL_CELLS]: Creation.deleteAllCells,\n    [CommonActionType.EXPAND_ALL]: Effects.expandAll,\n    [CommonActionType.COLLAPSE_ALL]: Effects.collapseAll,\n    [CommonActionType.EDITOR_LOADED]: Transfer.started,\n    [CommonActionType.SCROLL]: Effects.scrolled,\n    [CommonActionType.CLICK_CELL]: Effects.clickCell,\n    [CommonActionType.UNFOCUS_CELL]: Effects.unfocusCell,\n    [CommonActionType.UNMOUNT]: Creation.unmount,\n\n    // Messages from the webview (some are ignored)\n    [IncomingMessageActions.STARTCELL]: Creation.startCell,\n    [IncomingMessageActions.FINISHCELL]: Creation.finishCell,\n    [IncomingMessageActions.UPDATECELL]: Creation.updateCell,\n    [IncomingMessageActions.ACTIVATE]: CommonEffects.activate,\n    [IncomingMessageActions.RESTARTKERNEL]: Kernel.handleRestarted,\n    [IncomingMessageActions.GETCSSRESPONSE]: CommonEffects.handleCss,\n    [IncomingMessageActions.MONACOREADY]: CommonEffects.monacoReady,\n    [IncomingMessageActions.GETMONACOTHEMERESPONSE]: CommonEffects.monacoThemeChange,\n    [IncomingMessageActions.GETALLCELLS]: Transfer.getAllCells,\n    [IncomingMessageActions.EXPANDALL]: Effects.expandAll,\n    [IncomingMessageActions.COLLAPSEALL]: Effects.collapseAll,\n    [IncomingMessageActions.DELETEALLCELLS]: Creation.deleteAllCells,\n    [IncomingMessageActions.STARTPROGRESS]: CommonEffects.startProgress,\n    [IncomingMessageActions.STOPPROGRESS]: CommonEffects.stopProgress,\n    [IncomingMessageActions.UPDATESETTINGS]: Effects.updateSettings,\n    [IncomingMessageActions.STARTDEBUGGING]: Execution.startDebugging,\n    [IncomingMessageActions.STOPDEBUGGING]: Execution.stopDebugging,\n    [IncomingMessageActions.SCROLLTOCELL]: Effects.scrollToCell,\n    [IncomingMessageActions.UPDATEKERNEL]: Kernel.updateStatus,\n    [IncomingMessageActions.LOCINIT]: CommonEffects.handleLocInit\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT License.\r\n'use strict';\r\n\r\n// This must be on top, do not change. Required by webpack.\r\nimport '../common/main';\r\n// This must be on top, do not change. Required by webpack.\r\n\r\n// tslint:disable-next-line: ordered-imports\r\nimport '../common/index.css';\r\n\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { IVsCodeApi } from '../react-common/postOffice';\r\nimport { detectBaseTheme } from '../react-common/themeDetector';\r\nimport { getConnectedInteractiveEditor } from './interactivePanel';\r\nimport { createStore } from './redux/store';\r\n\r\n// This special function talks to vscode from a web panel\r\nexport declare function acquireVsCodeApi(): IVsCodeApi;\r\nconst baseTheme = detectBaseTheme();\r\n// tslint:disable-next-line: no-any\r\nconst testMode = (window as any).inTestMode;\r\n// tslint:disable-next-line: no-typeof-undefined\r\nconst skipDefault = testMode ? false : typeof acquireVsCodeApi !== 'undefined';\r\n\r\n// Create the redux store\r\nconst store = createStore(skipDefault, baseTheme, testMode);\r\n\r\n// Wire up a connected react control for our InteractiveEditor\r\nconst ConnectedInteractiveEditor = getConnectedInteractiveEditor();\r\n\r\n// Stick them all together\r\n// tslint:disable:no-typeof-undefined\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ConnectedInteractiveEditor />\r\n    </Provider>,\r\n    document.getElementById('root') as HTMLElement\r\n);\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n'use strict';\n\nimport * as ReduxCommon from '../../interactive-common/redux/store';\nimport { reducerMap } from './reducers';\n\n// This special version uses the reducer map from the IInteractiveWindowMapping\nexport function createStore(skipDefault: boolean, baseTheme: string, testMode: boolean) {\n    return ReduxCommon.createStore(skipDefault, baseTheme, testMode, false, reducerMap);\n}\n","\nvar content = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./interactivePanel.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./interactivePanel.less\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/less-loader/dist/cjs.js!./interactivePanel.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}